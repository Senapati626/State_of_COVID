{"ast":null,"code":"var _jsxFileName = \"D:\\\\covidtrack\\\\State_of_COVID\\\\State_of_COVID\\\\src\\\\Components\\\\Performers\\\\Performfilter.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Performfilter = ({\n  data\n}) => {\n  const filteredData = data.filter(items => {\n    return items.population != null;\n  }); //console.log(filteredData);\n\n  const findMaxRecoveryRatio = arr => {\n    let max = 0;\n    let nation = \"\";\n\n    for (let i = 0; i < arr.length; i++) {\n      if (parseInt(arr[i].cases.recovered) / parseInt(arr[i].cases.total) > max) {\n        max = parseInt(arr[i].cases.recovered) / parseInt(arr[i].cases.total);\n        nation = arr[i].country;\n      }\n    }\n\n    return nation;\n  };\n\n  const findMinCFR = arr => {\n    let min = 1;\n    let nation = \"\";\n    let cases = 0;\n    let deaths = 0;\n    let solve = [];\n\n    for (let i = 0; i < arr.length; i++) {\n      if (parseInt(arr[i].deaths.total) / parseInt(arr[i].cases.total) < min) {\n        min = parseInt(arr[i].deaths.total) / parseInt(arr[i].cases.total);\n        nation = arr[i].country;\n        cases = arr[i].cases.total;\n        deaths = arr[i].deaths.total;\n      }\n    }\n\n    solve.push(min, nation, cases, deaths);\n    return solve;\n  };\n\n  console.log(findMinCFR(filteredData));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: 'Best Recovery Ratio'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Performfilter;\nexport default Performfilter;\n\nvar _c;\n\n$RefreshReg$(_c, \"Performfilter\");","map":{"version":3,"sources":["D:/covidtrack/State_of_COVID/State_of_COVID/src/Components/Performers/Performfilter.js"],"names":["React","Performfilter","data","filteredData","filter","items","population","findMaxRecoveryRatio","arr","max","nation","i","length","parseInt","cases","recovered","total","country","findMinCFR","min","deaths","solve","push","console","log"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,aAAa,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAY;AAC9B,QAAMC,YAAY,GAAGD,IAAI,CAACE,MAAL,CAAaC,KAAD,IAAW;AACxC,WAAOA,KAAK,CAACC,UAAN,IAAoB,IAA3B;AACH,GAFoB,CAArB,CAD8B,CAI9B;;AAEA,QAAMC,oBAAoB,GAAIC,GAAD,IAAS;AAClC,QAAIC,GAAG,GAAG,CAAV;AACA,QAAIC,MAAM,GAAG,EAAb;;AACA,SAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACH,GAAG,CAACI,MAAnB,EAA2BD,CAAC,EAA5B,EAA+B;AAC3B,UAAIE,QAAQ,CAACL,GAAG,CAACG,CAAD,CAAH,CAAOG,KAAP,CAAaC,SAAd,CAAR,GAAiCF,QAAQ,CAACL,GAAG,CAACG,CAAD,CAAH,CAAOG,KAAP,CAAaE,KAAd,CAA1C,GAAkEP,GAArE,EAAyE;AACrEA,QAAAA,GAAG,GAAII,QAAQ,CAACL,GAAG,CAACG,CAAD,CAAH,CAAOG,KAAP,CAAaC,SAAd,CAAR,GAAiCF,QAAQ,CAACL,GAAG,CAACG,CAAD,CAAH,CAAOG,KAAP,CAAaE,KAAd,CAAhD;AACAN,QAAAA,MAAM,GAAGF,GAAG,CAACG,CAAD,CAAH,CAAOM,OAAhB;AACH;AACJ;;AACD,WAAOP,MAAP;AAEH,GAXD;;AAYA,QAAMQ,UAAU,GAAIV,GAAD,IAAS;AACxB,QAAIW,GAAG,GAAG,CAAV;AACA,QAAIT,MAAM,GAAG,EAAb;AACA,QAAII,KAAK,GAAG,CAAZ;AACA,QAAIM,MAAM,GAAG,CAAb;AACA,QAAIC,KAAK,GAAG,EAAZ;;AACA,SAAI,IAAIV,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAACH,GAAG,CAACI,MAArB,EAA6BD,CAAC,EAA9B,EAAiC;AAC7B,UAAIE,QAAQ,CAACL,GAAG,CAACG,CAAD,CAAH,CAAOS,MAAP,CAAcJ,KAAf,CAAR,GAA8BH,QAAQ,CAACL,GAAG,CAACG,CAAD,CAAH,CAAOG,KAAP,CAAaE,KAAd,CAAvC,GAA+DG,GAAlE,EAAsE;AAClEA,QAAAA,GAAG,GAAIN,QAAQ,CAACL,GAAG,CAACG,CAAD,CAAH,CAAOS,MAAP,CAAcJ,KAAf,CAAR,GAA8BH,QAAQ,CAACL,GAAG,CAACG,CAAD,CAAH,CAAOG,KAAP,CAAaE,KAAd,CAA7C;AACAN,QAAAA,MAAM,GAAGF,GAAG,CAACG,CAAD,CAAH,CAAOM,OAAhB;AACAH,QAAAA,KAAK,GAAGN,GAAG,CAACG,CAAD,CAAH,CAAOG,KAAP,CAAaE,KAArB;AACAI,QAAAA,MAAM,GAAGZ,GAAG,CAACG,CAAD,CAAH,CAAOS,MAAP,CAAcJ,KAAvB;AACH;AAEJ;;AACDK,IAAAA,KAAK,CAACC,IAAN,CAAWH,GAAX,EAAeT,MAAf,EAAsBI,KAAtB,EAA4BM,MAA5B;AACA,WAAOC,KAAP;AACH,GAjBD;;AAkBAE,EAAAA,OAAO,CAACC,GAAR,CAAYN,UAAU,CAACf,YAAD,CAAtB;AACA,sBACI;AAAA,2BACI;AAAA,gBAAK;AAAL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CA1CD;;KAAMF,a;AA4CN,eAAeA,aAAf","sourcesContent":["import React from \"react\";\r\n\r\nconst Performfilter = ({data}) => {\r\n    const filteredData = data.filter((items) => {\r\n        return items.population != null;\r\n    })\r\n    //console.log(filteredData);\r\n\r\n    const findMaxRecoveryRatio = (arr) => {\r\n        let max = 0;\r\n        let nation = \"\";\r\n        for(let i=0; i<arr.length; i++){\r\n            if((parseInt(arr[i].cases.recovered)/parseInt(arr[i].cases.total)) > max){\r\n                max = (parseInt(arr[i].cases.recovered)/parseInt(arr[i].cases.total));\r\n                nation = arr[i].country\r\n            }\r\n        }\r\n        return nation;\r\n        \r\n    }\r\n    const findMinCFR = (arr) => {\r\n        let min = 1;\r\n        let nation = \"\";\r\n        let cases = 0;\r\n        let deaths = 0;\r\n        let solve = [];\r\n        for(let i = 0; i<arr.length; i++){\r\n            if((parseInt(arr[i].deaths.total)/parseInt(arr[i].cases.total)) < min){\r\n                min = (parseInt(arr[i].deaths.total)/parseInt(arr[i].cases.total));\r\n                nation = arr[i].country;\r\n                cases = arr[i].cases.total;\r\n                deaths = arr[i].deaths.total;\r\n            }\r\n\r\n        }\r\n        solve.push(min,nation,cases,deaths);\r\n        return solve;\r\n    }\r\n    console.log(findMinCFR(filteredData))\r\n    return(\r\n        <div>\r\n            <h1>{'Best Recovery Ratio'}</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Performfilter;"]},"metadata":{},"sourceType":"module"}