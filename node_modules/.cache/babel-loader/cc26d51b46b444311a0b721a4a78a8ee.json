{"ast":null,"code":"var _jsxFileName = \"D:\\\\covidtrack\\\\State_of_COVID\\\\State_of_COVID\\\\src\\\\Components\\\\Performers\\\\Performfilter.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Performfilter = ({\n  data\n}) => {\n  const filteredData = data.filter(items => {\n    return items.population != null;\n  });\n  console.log(filteredData);\n\n  const findMaxRecoveryRatio = arr => {\n    let max = 0;\n    let nation = \"\";\n\n    for (let i = 0; i < arr.length; i++) {\n      if (parseInt(arr[i].cases.recovered) / parseInt(arr[i].cases.total) > max) {\n        max = parseInt(arr[i].cases.recovered) / parseInt(arr[i].cases.total);\n        nation = arr[i].country;\n      }\n    }\n\n    return nation;\n  };\n\n  const findMinCFR = arr => {\n    let min = 1;\n    let nation = \"\";\n\n    for (let i = 0; i < arr.length; i++) {\n      if (parseInt(arr[i].deaths.total) / parseInt(arr[i].cases.total)) {\n        min = parseInt(arr[i].deaths.total) / parseInt(arr[i].cases.total);\n        nation = arr[i].country;\n      }\n    }\n\n    return nation;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: findMaxRecoveryRatio(filteredData)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: findMinCFR(filteredData)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Performfilter;\nexport default Performfilter;\n\nvar _c;\n\n$RefreshReg$(_c, \"Performfilter\");","map":{"version":3,"sources":["D:/covidtrack/State_of_COVID/State_of_COVID/src/Components/Performers/Performfilter.js"],"names":["React","Performfilter","data","filteredData","filter","items","population","console","log","findMaxRecoveryRatio","arr","max","nation","i","length","parseInt","cases","recovered","total","country","findMinCFR","min","deaths"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,aAAa,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAY;AAC9B,QAAMC,YAAY,GAAGD,IAAI,CAACE,MAAL,CAAaC,KAAD,IAAW;AACxC,WAAOA,KAAK,CAACC,UAAN,IAAoB,IAA3B;AACH,GAFoB,CAArB;AAGAC,EAAAA,OAAO,CAACC,GAAR,CAAYL,YAAZ;;AAEA,QAAMM,oBAAoB,GAAIC,GAAD,IAAS;AAClC,QAAIC,GAAG,GAAG,CAAV;AACA,QAAIC,MAAM,GAAG,EAAb;;AACA,SAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACH,GAAG,CAACI,MAAnB,EAA2BD,CAAC,EAA5B,EAA+B;AAC3B,UAAIE,QAAQ,CAACL,GAAG,CAACG,CAAD,CAAH,CAAOG,KAAP,CAAaC,SAAd,CAAR,GAAiCF,QAAQ,CAACL,GAAG,CAACG,CAAD,CAAH,CAAOG,KAAP,CAAaE,KAAd,CAA1C,GAAkEP,GAArE,EAAyE;AACrEA,QAAAA,GAAG,GAAII,QAAQ,CAACL,GAAG,CAACG,CAAD,CAAH,CAAOG,KAAP,CAAaC,SAAd,CAAR,GAAiCF,QAAQ,CAACL,GAAG,CAACG,CAAD,CAAH,CAAOG,KAAP,CAAaE,KAAd,CAAhD;AACAN,QAAAA,MAAM,GAAGF,GAAG,CAACG,CAAD,CAAH,CAAOM,OAAhB;AACH;AACJ;;AACD,WAAOP,MAAP;AAEH,GAXD;;AAYA,QAAMQ,UAAU,GAAIV,GAAD,IAAS;AACxB,QAAIW,GAAG,GAAG,CAAV;AACA,QAAIT,MAAM,GAAG,EAAb;;AACA,SAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAACH,GAAG,CAACI,MAArB,EAA6BD,CAAC,EAA9B,EAAiC;AAC7B,UAAGE,QAAQ,CAACL,GAAG,CAACG,CAAD,CAAH,CAAOS,MAAP,CAAcJ,KAAf,CAAR,GAA8BH,QAAQ,CAACL,GAAG,CAACG,CAAD,CAAH,CAAOG,KAAP,CAAaE,KAAd,CAAzC,EAA8D;AAC1DG,QAAAA,GAAG,GAAIN,QAAQ,CAACL,GAAG,CAACG,CAAD,CAAH,CAAOS,MAAP,CAAcJ,KAAf,CAAR,GAA8BH,QAAQ,CAACL,GAAG,CAACG,CAAD,CAAH,CAAOG,KAAP,CAAaE,KAAd,CAA7C;AACAN,QAAAA,MAAM,GAAGF,GAAG,CAACG,CAAD,CAAH,CAAOM,OAAhB;AACH;AAEJ;;AACD,WAAOP,MAAP;AACH,GAXD;;AAYA,sBACI;AAAA,4BACI;AAAA,gBAAKH,oBAAoB,CAACN,YAAD;AAAzB;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA,gBAAKiB,UAAU,CAACjB,YAAD;AAAf;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH,CApCD;;KAAMF,a;AAsCN,eAAeA,aAAf","sourcesContent":["import React from \"react\";\r\n\r\nconst Performfilter = ({data}) => {\r\n    const filteredData = data.filter((items) => {\r\n        return items.population != null;\r\n    })\r\n    console.log(filteredData);\r\n\r\n    const findMaxRecoveryRatio = (arr) => {\r\n        let max = 0;\r\n        let nation = \"\";\r\n        for(let i=0; i<arr.length; i++){\r\n            if((parseInt(arr[i].cases.recovered)/parseInt(arr[i].cases.total)) > max){\r\n                max = (parseInt(arr[i].cases.recovered)/parseInt(arr[i].cases.total));\r\n                nation = arr[i].country\r\n            }\r\n        }\r\n        return nation;\r\n        \r\n    }\r\n    const findMinCFR = (arr) => {\r\n        let min = 1;\r\n        let nation = \"\";\r\n        for(let i = 0; i<arr.length; i++){\r\n            if(parseInt(arr[i].deaths.total)/parseInt(arr[i].cases.total)){\r\n                min = (parseInt(arr[i].deaths.total)/parseInt(arr[i].cases.total));\r\n                nation = arr[i].country;\r\n            }\r\n\r\n        }\r\n        return nation;\r\n    }\r\n    return(\r\n        <div>\r\n            <h2>{findMaxRecoveryRatio(filteredData)}</h2>\r\n            <h3>{findMinCFR(filteredData)}</h3>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Performfilter;"]},"metadata":{},"sourceType":"module"}