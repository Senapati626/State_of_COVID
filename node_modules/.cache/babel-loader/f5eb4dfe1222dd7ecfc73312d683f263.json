{"ast":null,"code":"var _jsxFileName = \"D:\\\\covidtrack\\\\State_of_COVID\\\\State_of_COVID\\\\src\\\\Components\\\\Performers\\\\Performfilter.js\";\nimport React from \"react\";\nimport './performers.css';\nimport LottieAnimation from './Lottie';\nimport confetti from './confetti.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Performfilter extends React.Component {\n  constructor() {\n    super();\n\n    this.showRR = () => {\n      this.setState({\n        rr: !this.state.rr\n      });\n    };\n\n    this.showCFR = () => {\n      this.setState({\n        cfr: !this.state.cfr\n      });\n    };\n\n    this.showTPR = () => {\n      this.setState({\n        tpr: !this.state.tpr\n      });\n    };\n\n    this.showTPC = () => {\n      this.setState({\n        tpc: !this.state.tpc\n      });\n    };\n\n    this.state = {\n      rr: false,\n      cfr: false,\n      tpr: false,\n      tpc: false\n    };\n  }\n\n  render() {\n    const finalData = this.props.data;\n\n    const findMaxRecoveryRatio = arr => {\n      let max = 0;\n      let nation = \"\";\n      let solve = [];\n\n      for (let i = 0; i < arr.length; i++) {\n        if (parseInt(arr[i].cases.recovered) / parseInt(arr[i].cases.total) > max) {\n          max = (parseInt(arr[i].cases.recovered) / parseInt(arr[i].cases.total)).toFixed(4);\n          nation = arr[i].country;\n        }\n      }\n\n      solve.push(max, nation);\n      return solve;\n    };\n\n    const findMinCFR = arr => {\n      let min = 1;\n      let nation = \"\";\n      let solve = [];\n\n      for (let i = 0; i < arr.length; i++) {\n        if (parseInt(arr[i].deaths.total) / parseInt(arr[i].cases.total) < min) {\n          min = (parseInt(arr[i].deaths.total) / parseInt(arr[i].cases.total)).toFixed(7);\n          nation = arr[i].country;\n        }\n      }\n\n      solve.push(min, nation);\n      return solve;\n    };\n\n    const findMinTPR = arr => {\n      let min = 1;\n      let nation = \"\";\n      let solve = [];\n\n      for (let i = 0; i < arr.length; i++) {\n        if (parseInt(arr[i].cases.total) / parseInt(arr[i].tests.total) < min) {\n          min = (parseInt(arr[i].cases.total) / parseInt(arr[i].tests.total)).toFixed(7);\n          nation = arr[i].country;\n        }\n      }\n\n      solve.push(min, nation);\n      return solve;\n    };\n\n    const findmaxTPC = arr => {\n      let max = 0;\n      let nation = \"\";\n      let solve = [];\n\n      for (let i = 0; i < arr.length; i++) {\n        if (parseInt(arr[i].tests.total) / parseInt(arr[i].population) > max) {\n          max = (parseInt(arr[i].tests.total) / parseInt(arr[i].population)).toFixed(7);\n          nation = arr[i].country;\n        }\n      }\n\n      solve.push(max, nation);\n      return solve;\n    };\n\n    const CFR = findMinCFR(finalData);\n    const RR = findMaxRecoveryRatio(finalData);\n    const TPR = findMinTPR(finalData);\n    const TPC = findmaxTPC(finalData);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"performer_wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"performer_header_main\",\n          children: 'Best Case Fatality Ratio'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"performer_content\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"performer_section\",\n            id: \"wrapper\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: this.state.cfr ? \"performer_button dissolve vanish\" : \"performer_button\",\n              id: \"button\",\n              onClick: this.showCFR,\n              children: \"check results\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: this.state.cfr ? \"performer_text_header\" : \"performer_text_header vanish\",\n              id: \"text\",\n              children: CFR[1]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: this.state.cfr ? \"performer_text\" : \"performer_text vanish\",\n              children: CFR[1] + \" has a Case Fatality Ratio of just \" + CFR[0] + \".\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: this.state.cfr ? \"confetti\" : \"hide\",\n            children: /*#__PURE__*/_jsxDEV(LottieAnimation, {\n              lotti: confetti,\n              height: 300,\n              width: 300\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"performer_header_main\",\n          children: 'Best Recovery Ratio'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"performer_content\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"performer_section\",\n            id: \"wrapper\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: this.state.rr ? \"performer_button dissolve vanish\" : \"performer_button\",\n              id: \"button\",\n              onClick: this.showRR,\n              children: \"check results\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: this.state.rr ? \"performer_text_header\" : \"performer_text_header vanish\",\n              id: \"text\",\n              children: RR[1]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: this.state.rr ? \"performer_text\" : \"performer_text vanish\",\n              children: RR[1] + \" has the highest Recovery Ratio of \" + RR[0] + \".\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"performer_header_main\",\n          children: 'Lowest Test Positivity Rate'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"performer_content\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"performer_section\",\n            id: \"wrapper\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: this.state.tpr ? \"performer_button dissolve vanish\" : \"performer_button\",\n              id: \"button\",\n              onClick: this.showTPR,\n              children: \"check results\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: this.state.tpr ? \"performer_text_header\" : \"performer_text_header vanish\",\n              id: \"text\",\n              children: TPR[1]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: this.state.tpr ? \"performer_text\" : \"performer_text vanish\",\n              children: TPR[1] + \" has the highest Recovery Ratio of \" + TPR[0] + \".\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"performer_header_main\",\n          children: 'Highest Tests per Capita'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"performer_header_main\",\n          children: 'Lowest Positive Cases per Capita'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default Performfilter;","map":{"version":3,"sources":["D:/covidtrack/State_of_COVID/State_of_COVID/src/Components/Performers/Performfilter.js"],"names":["React","LottieAnimation","confetti","Performfilter","Component","constructor","showRR","setState","rr","state","showCFR","cfr","showTPR","tpr","showTPC","tpc","render","finalData","props","data","findMaxRecoveryRatio","arr","max","nation","solve","i","length","parseInt","cases","recovered","total","toFixed","country","push","findMinCFR","min","deaths","findMinTPR","tests","findmaxTPC","population","CFR","RR","TPR","TPC"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport './performers.css';\r\nimport LottieAnimation from './Lottie';\r\nimport confetti from './confetti.json';\r\n\r\nclass Performfilter extends React.Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            rr: false,\r\n            cfr: false,\r\n            tpr: false,\r\n            tpc: false\r\n        }\r\n    }\r\n    showRR = () =>{\r\n        this.setState({rr: (!this.state.rr)})\r\n    }\r\n    showCFR = () =>{\r\n        this.setState({cfr: (!this.state.cfr)})\r\n    }\r\n    showTPR = () => {\r\n        this.setState({tpr: (!this.state.tpr)})\r\n    }\r\n    showTPC = () => {\r\n        this.setState({tpc: (!this.state.tpc)})\r\n    }\r\n    render(){\r\n    const finalData = this.props.data;\r\n    const findMaxRecoveryRatio = (arr) => {\r\n        let max = 0;\r\n        let nation = \"\";\r\n        let solve = [];\r\n        for(let i=0; i<arr.length; i++){\r\n            if((parseInt(arr[i].cases.recovered)/parseInt(arr[i].cases.total)) > max){\r\n                max = (parseInt(arr[i].cases.recovered)/parseInt(arr[i].cases.total)).toFixed(4);\r\n                nation = arr[i].country\r\n            }\r\n        }\r\n        solve.push(max,nation);\r\n        return solve;\r\n    }\r\n    const findMinCFR = (arr) => {\r\n        let min = 1;\r\n        let nation = \"\";\r\n        let solve = [];\r\n        for(let i = 0; i<arr.length; i++){\r\n            if((parseInt(arr[i].deaths.total)/parseInt(arr[i].cases.total)) < min){\r\n                min = (parseInt(arr[i].deaths.total)/parseInt(arr[i].cases.total)).toFixed(7);\r\n                nation = arr[i].country;\r\n            }\r\n        }\r\n        solve.push(min,nation);\r\n        return solve;\r\n    }\r\n    const findMinTPR = (arr) => {\r\n        let min = 1;\r\n        let nation = \"\";\r\n        let solve = [];\r\n        for(let i = 0; i<arr.length; i++){\r\n            if((parseInt(arr[i].cases.total)/parseInt(arr[i].tests.total)) < min){\r\n                min = (parseInt(arr[i].cases.total)/parseInt(arr[i].tests.total)).toFixed(7);\r\n                nation = arr[i].country;\r\n            }\r\n        }\r\n        solve.push(min,nation);\r\n        return solve;\r\n    }\r\n    const findmaxTPC = (arr) => {\r\n        let max = 0;\r\n        let nation = \"\";\r\n        let solve = [];\r\n        for(let i=0; i<arr.length; i++){\r\n            if((parseInt(arr[i].tests.total)/parseInt(arr[i].population)) > max){\r\n                max = (parseInt(arr[i].tests.total)/parseInt(arr[i].population)).toFixed(7);\r\n                nation = arr[i].country\r\n            }\r\n        }\r\n        solve.push(max,nation);\r\n        return solve;\r\n    }\r\n\r\n    const CFR = findMinCFR(finalData);\r\n    const RR = findMaxRecoveryRatio(finalData);\r\n    const TPR = findMinTPR(finalData);\r\n    const TPC = findmaxTPC(finalData);\r\n    return(\r\n        <div>\r\n            <div className=\"performer_wrapper\">\r\n                <h1 className=\"performer_header_main\">{'Best Case Fatality Ratio'}</h1>\r\n                <div className=\"performer_content\">\r\n                    <div className=\"performer_section\" id=\"wrapper\">\r\n                        <button className={this.state.cfr ? \"performer_button dissolve vanish\" : \"performer_button\"} id=\"button\" onClick={this.showCFR}>check results</button>\r\n                        <p className={this.state.cfr ? \"performer_text_header\" : \"performer_text_header vanish\"} id=\"text\">{CFR[1]}</p>\r\n                        <p className={this.state.cfr ? \"performer_text\" : \"performer_text vanish\"}>{CFR[1] + \" has a Case Fatality Ratio of just \" + CFR[0] + \".\"}</p>\r\n                    </div>\r\n                    <div className={this.state.cfr ? \"confetti\" : \"hide\"}>\r\n                        <LottieAnimation lotti={confetti} height={300} width={300}/>\r\n                    </div>\r\n                </div>\r\n                <h1 className=\"performer_header_main\">{'Best Recovery Ratio'}</h1>\r\n                <div className=\"performer_content\">\r\n                    <div className=\"performer_section\" id=\"wrapper\">\r\n                        <button className={this.state.rr ? \"performer_button dissolve vanish\" : \"performer_button\"} id=\"button\" onClick={this.showRR}>check results</button>\r\n                        <p className={this.state.rr ? \"performer_text_header\" : \"performer_text_header vanish\"} id=\"text\">{RR[1]}</p>\r\n                        <p className={this.state.rr ? \"performer_text\" : \"performer_text vanish\"}>{RR[1] + \" has the highest Recovery Ratio of \" + RR[0] + \".\"}</p>\r\n                    </div>\r\n                </div>\r\n                <h1 className=\"performer_header_main\">{'Lowest Test Positivity Rate'}</h1>\r\n                <div className=\"performer_content\">\r\n                    <div className=\"performer_section\" id=\"wrapper\">\r\n                        <button className={this.state.tpr ? \"performer_button dissolve vanish\" : \"performer_button\"} id=\"button\" onClick={this.showTPR}>check results</button>\r\n                        <p className={this.state.tpr ? \"performer_text_header\" : \"performer_text_header vanish\"} id=\"text\">{TPR[1]}</p>\r\n                        <p className={this.state.tpr ? \"performer_text\" : \"performer_text vanish\"}>{TPR[1] + \" has the highest Recovery Ratio of \" + TPR[0] + \".\"}</p>\r\n                    </div>\r\n                </div>\r\n                <h1 className=\"performer_header_main\">{'Highest Tests per Capita'}</h1>\r\n                <h1 className=\"performer_header_main\">{'Lowest Positive Cases per Capita'}</h1>\r\n            </div> \r\n        </div>\r\n    )\r\n    }\r\n}\r\n\r\nexport default Performfilter;"]},"metadata":{},"sourceType":"module"}