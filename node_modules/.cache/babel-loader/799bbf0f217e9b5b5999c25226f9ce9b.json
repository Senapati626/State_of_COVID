{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\covidtrack\\\\state-of-covid\\\\src\\\\Components\\\\Leaders\\\\Datafilter.js\";\nimport React from \"react\";\nimport Testsgraph from \"./Tests\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Datafilter = ({\n  data\n}) => {\n  const filteredData = data.filter(datas => {\n    return datas.population != null;\n  });\n\n  function testsort(array) {\n    return array.sort(function (a, b) {\n      return a.tests.total > b.tests.total ? -1 : b.tests.total > a.tests.total ? 1 : 0;\n    });\n  }\n\n  function recoveredsort(array) {\n    return array.sort(function (a, b) {\n      return parseInt(a.cases.recovered) / parseInt(a.cases.total) > parseInt(b.cases.recovered) / parseInt(b.cases.total) ? -1 : parseInt(b.cases.recovered) / parseInt(b.cases.total) > parseInt(a.cases.recovered) / parseInt(a.cases.total) ? 1 : 0;\n    });\n  }\n\n  function testsPush(arr) {\n    let dataset = [];\n\n    for (var i = 0; i < arr.length - 1; i++) {\n      dataset.push(arr[i].tests.total);\n    }\n\n    return dataset;\n  }\n\n  function recoveryRatio(arr) {\n    let dataset = [];\n\n    for (var i = 0; i < arr.length - 1; i++) {\n      dataset.push(parseInt(arr[i].cases.recovered) / parseInt(arr[i].cases.total));\n    }\n\n    return dataset;\n  }\n\n  function labelssPush(arr) {\n    let labelset = [];\n\n    for (var i = 0; i < arr.length - 1; i++) {\n      labelset.push(arr[i].country);\n    }\n\n    return labelset;\n  }\n\n  const sortedData = testsort(filteredData);\n  const finalTestsData = testsPush(sortedData);\n  const finalLabel = labelssPush(sortedData);\n  console.log(recoveredsort(filteredData));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Testsgraph, {\n        data2: finalTestsData,\n        label: finalLabel,\n        title: \"Tests Conducted\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 8\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 3\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 3\n  }, this);\n};\n\n_c = Datafilter;\nexport default Datafilter;\n\nvar _c;\n\n$RefreshReg$(_c, \"Datafilter\");","map":{"version":3,"sources":["C:/Users/user/Desktop/covidtrack/state-of-covid/src/Components/Leaders/Datafilter.js"],"names":["React","Testsgraph","Datafilter","data","filteredData","filter","datas","population","testsort","array","sort","a","b","tests","total","recoveredsort","parseInt","cases","recovered","testsPush","arr","dataset","i","length","push","recoveryRatio","labelssPush","labelset","country","sortedData","finalTestsData","finalLabel","console","log"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,SAAvB;;;AACA,MAAMC,UAAU,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAY;AAE9B,QAAMC,YAAY,GAAGD,IAAI,CAACE,MAAL,CAAaC,KAAD,IAAW;AAC5C,WAAOA,KAAK,CAACC,UAAN,IAAoB,IAA3B;AACE,GAFmB,CAArB;;AAIA,WAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACrB,WAAOA,KAAK,CAACC,IAAN,CAAW,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAC/B,aAAOD,CAAC,CAACE,KAAF,CAAQC,KAAR,GAAgBF,CAAC,CAACC,KAAF,CAAQC,KAAxB,GACH,CAAC,CADE,GAEHF,CAAC,CAACC,KAAF,CAAQC,KAAR,GAAgBH,CAAC,CAACE,KAAF,CAAQC,KAAxB,GACA,CADA,GAEA,CAJJ;AAKD,KANK,CAAP;AAOD;;AACD,WAASC,aAAT,CAAuBN,KAAvB,EAA8B;AAC7B,WAAOA,KAAK,CAACC,IAAN,CAAW,UAASC,CAAT,EAAWC,CAAX,EAAc;AAC/B,aAAQI,QAAQ,CAACL,CAAC,CAACM,KAAF,CAAQC,SAAT,CAAR,GAA4BF,QAAQ,CAACL,CAAC,CAACM,KAAF,CAAQH,KAAT,CAArC,GAAyDE,QAAQ,CAACJ,CAAC,CAACK,KAAF,CAAQC,SAAT,CAAR,GAA4BF,QAAQ,CAACJ,CAAC,CAACK,KAAF,CAAQH,KAAT,CAA7F,GACL,CAAC,CADI,GAEJE,QAAQ,CAACJ,CAAC,CAACK,KAAF,CAAQC,SAAT,CAAR,GAA4BF,QAAQ,CAACJ,CAAC,CAACK,KAAF,CAAQH,KAAT,CAArC,GAAyDE,QAAQ,CAACL,CAAC,CAACM,KAAF,CAAQC,SAAT,CAAR,GAA4BF,QAAQ,CAACL,CAAC,CAACM,KAAF,CAAQH,KAAT,CAA7F,GACA,CADA,GAEA,CAJF;AAKA,KANM,CAAP;AAOA;;AACD,WAASK,SAAT,CAAmBC,GAAnB,EAAwB;AACvB,QAAIC,OAAO,GAAG,EAAd;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAAG,CAACG,MAAJ,GAAa,CAAjC,EAAoCD,CAAC,EAArC,EAAwC;AACvCD,MAAAA,OAAO,CAACG,IAAR,CAAaJ,GAAG,CAACE,CAAD,CAAH,CAAOT,KAAP,CAAaC,KAA1B;AACA;;AACD,WAAOO,OAAP;AACA;;AACD,WAASI,aAAT,CAAuBL,GAAvB,EAA4B;AAC3B,QAAIC,OAAO,GAAG,EAAd;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAiBA,CAAC,GAAEF,GAAG,CAACG,MAAJ,GAAW,CAA/B,EAAkCD,CAAC,EAAnC,EAAsC;AACrCD,MAAAA,OAAO,CAACG,IAAR,CAAaR,QAAQ,CAACI,GAAG,CAACE,CAAD,CAAH,CAAOL,KAAP,CAAaC,SAAd,CAAR,GAAiCF,QAAQ,CAACI,GAAG,CAACE,CAAD,CAAH,CAAOL,KAAP,CAAaH,KAAd,CAAtD;AACA;;AACD,WAAOO,OAAP;AACA;;AACD,WAASK,WAAT,CAAqBN,GAArB,EAA0B;AAC5B,QAAIO,QAAQ,GAAG,EAAf;;AACA,SAAK,IAAIL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAAG,CAACG,MAAJ,GAAa,CAAjC,EAAoCD,CAAC,EAArC,EAAwC;AACvCK,MAAAA,QAAQ,CAACH,IAAT,CAAcJ,GAAG,CAACE,CAAD,CAAH,CAAOM,OAArB;AACA;;AACD,WAAOD,QAAP;AACG;;AAEH,QAAME,UAAU,GAAGrB,QAAQ,CAACJ,YAAD,CAA3B;AACA,QAAM0B,cAAc,GAAGX,SAAS,CAACU,UAAD,CAAhC;AACA,QAAME,UAAU,GAAGL,WAAW,CAACG,UAAD,CAA9B;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYlB,aAAa,CAACX,YAAD,CAAzB;AACA,sBACC;AAAA,2BACA;AAAA,6BAAK,QAAC,UAAD;AAAY,QAAA,KAAK,EAAI0B,cAArB;AAAqC,QAAA,KAAK,EAAIC,UAA9C;AAA0D,QAAA,KAAK,EAAG;AAAlE;AAAA;AAAA;AAAA;AAAA;AAAL;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,UADD;AAIA,CAtDD;;KAAM7B,U;AAwDN,eAAeA,UAAf","sourcesContent":["import React from \"react\";\r\nimport Testsgraph from \"./Tests\"\r\nconst Datafilter = ({data}) => {\r\n\t\r\n\tconst filteredData = data.filter((datas) => {\r\n\treturn datas.population != null;\r\n\t\t});\r\n\r\n\tfunction testsort(array) {\r\n    \treturn array.sort(function (a, b) {\r\n      \t\treturn a.tests.total > b.tests.total\r\n\t\t        ? -1\r\n\t\t        : b.tests.total > a.tests.total\r\n\t\t        ? 1\r\n\t\t        : 0;\r\n\t\t    });\r\n  \t}\r\n  \tfunction recoveredsort(array) {\r\n  \t\treturn array.sort(function(a,b) {\r\n  \t\t\treturn (parseInt(a.cases.recovered)/parseInt(a.cases.total)) > (parseInt(b.cases.recovered)/parseInt(b.cases.total))\r\n  \t\t\t? -1\r\n  \t\t\t: (parseInt(b.cases.recovered)/parseInt(b.cases.total)) > (parseInt(a.cases.recovered)/parseInt(a.cases.total))\r\n  \t\t\t? 1\r\n  \t\t\t: 0;\r\n  \t\t});\r\n  \t}\r\n  \tfunction testsPush(arr) {\r\n  \t\tlet dataset = [];\r\n  \t\tfor (var i = 0; i < arr.length - 1; i++){\r\n  \t\t\tdataset.push(arr[i].tests.total);\r\n  \t\t}\r\n  \t\treturn dataset;\r\n  \t}\r\n  \tfunction recoveryRatio(arr) {\r\n  \t\tlet dataset = [];\r\n  \t\tfor (var i = 0 ; i< arr.length-1; i++){\r\n  \t\t\tdataset.push(parseInt(arr[i].cases.recovered)/parseInt(arr[i].cases.total));\r\n  \t\t}\r\n  \t\treturn dataset;\r\n  \t}\r\n  \tfunction labelssPush(arr) {\r\n\tlet labelset = [];\r\n\tfor (var i = 0; i < arr.length - 1; i++){\r\n\t\tlabelset.push(arr[i].country);\r\n\t}\r\n\treturn labelset;\r\n  \t}\r\n\r\n\tconst sortedData = testsort(filteredData);\r\n\tconst finalTestsData = testsPush(sortedData);\r\n\tconst finalLabel = labelssPush(sortedData);\r\n\tconsole.log(recoveredsort(filteredData));\r\n\treturn(\r\n\t\t<div>\r\n\t\t<div><Testsgraph data2 = {finalTestsData} label = {finalLabel} title = \"Tests Conducted\" /></div>\r\n\t\t</div>)\r\n}\r\n\r\nexport default Datafilter;"]},"metadata":{},"sourceType":"module"}