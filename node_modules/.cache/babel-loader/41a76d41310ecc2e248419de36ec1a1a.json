{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\covidtrack\\\\state-of-covid\\\\src\\\\Components\\\\Leaders\\\\Datafilter.js\";\nimport React from \"react\";\nimport Testsgraph from \"./Tests\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Datafilter = ({\n  data\n}) => {\n  const filteredData = data.filter(datas => {\n    return datas.population != null;\n  });\n\n  function sort(array) {\n    return array.sort(function (a, b) {\n      return a.tests.total > b.tests.total ? -1 : b.tests.total > a.tests.total ? 1 : 0;\n    });\n  }\n\n  function testsPush(arr) {\n    let dataset = [];\n\n    for (var i = 0; i < arr.length - 1; i++) {\n      dataset.push(arr[i].tests.total);\n    }\n\n    return dataset;\n  }\n\n  function labelssPush(arr, props) {\n    let labelset = [];\n\n    for (var i = 0; i < arr.length - 1; i++) {\n      labelset.push(arr[i].props);\n    }\n\n    return labelset;\n  }\n\n  const sortedData = sort(filteredData);\n  const finalTestsData = testsPush(sortedData.slice(0, 5));\n  console.log(labelssPush(sortedData, country));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Testsgraph, {\n      data: finalTestsData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 8\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 3\n  }, this);\n};\n\n_c = Datafilter;\nexport default Datafilter;\n\nvar _c;\n\n$RefreshReg$(_c, \"Datafilter\");","map":{"version":3,"sources":["C:/Users/user/Desktop/covidtrack/state-of-covid/src/Components/Leaders/Datafilter.js"],"names":["React","Testsgraph","Datafilter","data","filteredData","filter","datas","population","sort","array","a","b","tests","total","testsPush","arr","dataset","i","length","push","labelssPush","props","labelset","sortedData","finalTestsData","slice","console","log","country"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,SAAvB;;;AACA,MAAMC,UAAU,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAY;AAE9B,QAAMC,YAAY,GAAGD,IAAI,CAACE,MAAL,CAAaC,KAAD,IAAW;AAC5C,WAAOA,KAAK,CAACC,UAAN,IAAoB,IAA3B;AACE,GAFmB,CAArB;;AAIA,WAASC,IAAT,CAAcC,KAAd,EAAqB;AACjB,WAAOA,KAAK,CAACD,IAAN,CAAW,UAAUE,CAAV,EAAaC,CAAb,EAAgB;AAC/B,aAAOD,CAAC,CAACE,KAAF,CAAQC,KAAR,GAAgBF,CAAC,CAACC,KAAF,CAAQC,KAAxB,GACH,CAAC,CADE,GAEHF,CAAC,CAACC,KAAF,CAAQC,KAAR,GAAgBH,CAAC,CAACE,KAAF,CAAQC,KAAxB,GACA,CADA,GAEA,CAJJ;AAKD,KANK,CAAP;AAOD;;AACD,WAASC,SAAT,CAAmBC,GAAnB,EAAwB;AACvB,QAAIC,OAAO,GAAG,EAAd;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAAG,CAACG,MAAJ,GAAa,CAAjC,EAAoCD,CAAC,EAArC,EAAwC;AACvCD,MAAAA,OAAO,CAACG,IAAR,CAAaJ,GAAG,CAACE,CAAD,CAAH,CAAOL,KAAP,CAAaC,KAA1B;AACA;;AACD,WAAOG,OAAP;AACA;;AACD,WAASI,WAAT,CAAqBL,GAArB,EAA0BM,KAA1B,EAAiC;AACnC,QAAIC,QAAQ,GAAG,EAAf;;AACA,SAAK,IAAIL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAAG,CAACG,MAAJ,GAAa,CAAjC,EAAoCD,CAAC,EAArC,EAAwC;AACvCK,MAAAA,QAAQ,CAACH,IAAT,CAAcJ,GAAG,CAACE,CAAD,CAAH,CAAOI,KAArB;AACA;;AACD,WAAOC,QAAP;AACG;;AAEH,QAAMC,UAAU,GAAGf,IAAI,CAACJ,YAAD,CAAvB;AACA,QAAMoB,cAAc,GAAGV,SAAS,CAACS,UAAU,CAACE,KAAX,CAAiB,CAAjB,EAAmB,CAAnB,CAAD,CAAhC;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYP,WAAW,CAACG,UAAD,EAAaK,OAAb,CAAvB;AACA,sBACC;AAAA,2BAAK,QAAC,UAAD;AAAY,MAAA,IAAI,EAAIJ;AAApB;AAAA;AAAA;AAAA;AAAA;AAAL;AAAA;AAAA;AAAA;AAAA,UADD;AAGA,CApCD;;KAAMtB,U;AAsCN,eAAeA,UAAf","sourcesContent":["import React from \"react\";\r\nimport Testsgraph from \"./Tests\"\r\nconst Datafilter = ({data}) => {\r\n\t\r\n\tconst filteredData = data.filter((datas) => {\r\n\treturn datas.population != null;\r\n\t\t});\r\n\r\n\tfunction sort(array) {\r\n    \treturn array.sort(function (a, b) {\r\n      \t\treturn a.tests.total > b.tests.total\r\n\t\t        ? -1\r\n\t\t        : b.tests.total > a.tests.total\r\n\t\t        ? 1\r\n\t\t        : 0;\r\n\t\t    });\r\n  \t}\r\n  \tfunction testsPush(arr) {\r\n  \t\tlet dataset = [];\r\n  \t\tfor (var i = 0; i < arr.length - 1; i++){\r\n  \t\t\tdataset.push(arr[i].tests.total);\r\n  \t\t}\r\n  \t\treturn dataset;\r\n  \t}\r\n  \tfunction labelssPush(arr, props) {\r\n\tlet labelset = [];\r\n\tfor (var i = 0; i < arr.length - 1; i++){\r\n\t\tlabelset.push(arr[i].props);\r\n\t}\r\n\treturn labelset;\r\n  \t}\r\n\r\n\tconst sortedData = sort(filteredData);\r\n\tconst finalTestsData = testsPush(sortedData.slice(0,5));\r\n\tconsole.log(labelssPush(sortedData, country));\r\n\treturn(\r\n\t\t<div><Testsgraph data = {finalTestsData} /></div>\r\n\t\t)\r\n}\r\n\r\nexport default Datafilter;"]},"metadata":{},"sourceType":"module"}