{"ast":null,"code":"import React, { useMemo, memo, useCallback, Fragment, useRef, useState, useEffect } from 'react';\nimport { useValueFormatter, blendModePropType, motionPropTypes, useMotionConfig, withContainer, useDimensions, useTheme, CartesianMarkers, SvgWrapper, ResponsiveWrapper, getRelativeCursor, isCursorInRect } from '@nivo/core';\nimport { axisPropType, Grid, Axes, renderGridLinesToCanvas, renderAxesToCanvas } from '@nivo/axes';\nimport { LegendPropShape, BoxLegendSvg, renderLegendToCanvas } from '@nivo/legends';\nimport { useOrdinalColorScale, ordinalColorsPropType } from '@nivo/colors';\nimport { computeXYScalesForSeries, scalePropType } from '@nivo/scales';\nimport { useAnnotations, annotationSpecPropType, Annotation, renderAnnotationsToCanvas } from '@nivo/annotations';\nimport get from 'lodash/get';\nimport isString from 'lodash/isString';\nimport isNumber from 'lodash/isNumber';\nimport isPlainObject from 'lodash/isPlainObject';\nimport { scaleLinear } from 'd3-scale';\nimport PropTypes from 'prop-types';\nimport { BasicTooltip, useTooltip } from '@nivo/tooltip';\nimport { TransitionMotion, spring } from 'react-motion';\nimport { Mesh as Mesh$2, useVoronoiMesh, renderVoronoiToCanvas, renderVoronoiCellToCanvas } from '@nivo/voronoi';\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nvar getNodeSizeGenerator = function getNodeSizeGenerator(size) {\n  if (typeof size === 'function') return size;\n  if (isNumber(size)) return function () {\n    return size;\n  };\n\n  if (isPlainObject(size)) {\n    if (!isString(size.key)) {\n      throw new Error('symbolSize is invalid, key should be a string pointing to the property to use to determine node size');\n    }\n\n    if (!Array.isArray(size.values) || size.values.length !== 2) {\n      throw new Error('symbolSize is invalid, values spec should be an array containing two values, min and max');\n    }\n\n    if (!Array.isArray(size.sizes) || size.sizes.length !== 2) {\n      throw new Error('symbolSize is invalid, sizes spec should be an array containing two values, min and max');\n    }\n\n    var sizeScale = scaleLinear().domain([size.values[0], size.values[1]]).range([size.sizes[0], size.sizes[1]]);\n    return function (d) {\n      return sizeScale(get(d, size.key));\n    };\n  }\n\n  throw new Error('symbolSize is invalid, it should be either a function, a number or an object');\n};\n\nvar computePoints = function computePoints(_ref) {\n  var series = _ref.series,\n      formatX = _ref.formatX,\n      formatY = _ref.formatY;\n  return series.reduce(function (agg, serie) {\n    return [].concat(_toConsumableArray(agg), _toConsumableArray(serie.data.map(function (d, i) {\n      return {\n        index: agg.length + i,\n        id: \"\".concat(serie.id, \".\").concat(i),\n        x: d.position.x,\n        y: d.position.y,\n        data: _objectSpread2(_objectSpread2({}, d.data), {}, {\n          id: \"\".concat(serie.id, \".\").concat(i),\n          serieId: serie.id,\n          formattedX: formatX(d.data.x),\n          formattedY: formatY(d.data.y)\n        })\n      };\n    })));\n  }, []);\n};\n\nvar useNodeSize = function useNodeSize(size) {\n  return useMemo(function () {\n    return getNodeSizeGenerator(size);\n  }, [size]);\n};\n\nvar useScatterPlot = function useScatterPlot(_ref) {\n  var data = _ref.data,\n      xScaleSpec = _ref.xScaleSpec,\n      xFormat = _ref.xFormat,\n      yScaleSpec = _ref.yScaleSpec,\n      yFormat = _ref.yFormat,\n      width = _ref.width,\n      height = _ref.height,\n      nodeSize = _ref.nodeSize,\n      colors = _ref.colors;\n\n  var _useMemo = useMemo(function () {\n    return computeXYScalesForSeries(data, xScaleSpec, yScaleSpec, width, height);\n  }, [data, xScaleSpec, yScaleSpec, width, height]),\n      series = _useMemo.series,\n      xScale = _useMemo.xScale,\n      yScale = _useMemo.yScale;\n\n  var formatX = useValueFormatter(xFormat);\n  var formatY = useValueFormatter(yFormat);\n  var rawNodes = useMemo(function () {\n    return computePoints({\n      series: series,\n      formatX: formatX,\n      formatY: formatY\n    });\n  }, [series, formatX, formatY]);\n  var getNodeSize = useNodeSize(nodeSize);\n  var getColor = useOrdinalColorScale(colors, 'serieId');\n  var nodes = useMemo(function () {\n    return rawNodes.map(function (rawNode) {\n      return _objectSpread2(_objectSpread2({}, rawNode), {}, {\n        size: getNodeSize(rawNode.data),\n        style: {\n          color: getColor(rawNode.data)\n        }\n      });\n    });\n  }, [rawNodes, getNodeSize, getColor]);\n  var legendData = useMemo(function () {\n    return series.map(function (serie) {\n      return {\n        id: serie.id,\n        label: serie.id,\n        color: getColor({\n          serieId: serie.id\n        })\n      };\n    });\n  }, [series, getColor]);\n  return {\n    xScale: xScale,\n    yScale: yScale,\n    nodes: nodes,\n    legendData: legendData\n  };\n};\n\nvar useScatterPlotAnnotations = function useScatterPlotAnnotations(items, annotations) {\n  return useAnnotations({\n    items: items,\n    annotations: annotations,\n    getDimensions: function getDimensions(node, offset) {\n      var size = node.size + offset * 2;\n      return {\n        size: size,\n        width: size,\n        height: size\n      };\n    }\n  });\n};\n\nvar Node = function Node(_ref) {\n  var x = _ref.x,\n      y = _ref.y,\n      size = _ref.size,\n      color = _ref.color,\n      blendMode = _ref.blendMode,\n      onMouseEnter = _ref.onMouseEnter,\n      onMouseMove = _ref.onMouseMove,\n      onMouseLeave = _ref.onMouseLeave,\n      onClick = _ref.onClick;\n  return React.createElement(\"circle\", {\n    cx: x,\n    cy: y,\n    r: size / 2,\n    fill: color,\n    style: {\n      mixBlendMode: blendMode\n    },\n    onMouseEnter: onMouseEnter,\n    onMouseMove: onMouseMove,\n    onMouseLeave: onMouseLeave,\n    onClick: onClick\n  });\n};\n\nvar Node$1 = memo(Node);\n\nvar Tooltip = function Tooltip(_ref) {\n  var node = _ref.node;\n  return React.createElement(BasicTooltip, {\n    id: node.data.serieId,\n    value: \"x: \".concat(node.data.formattedX, \", y: \").concat(node.data.formattedY),\n    enableChip: true,\n    color: node.style.color\n  });\n};\n\nvar Tooltip$1 = memo(Tooltip);\nvar commonPropTypes = {\n  data: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n    data: PropTypes.arrayOf(PropTypes.shape({\n      x: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)]).isRequired,\n      y: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)]).isRequired\n    })).isRequired\n  })).isRequired,\n  xScale: scalePropType.isRequired,\n  xFormat: PropTypes.any,\n  yScale: scalePropType.isRequired,\n  yFormat: PropTypes.any,\n  layers: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.oneOf(['grid', 'axes', 'nodes', 'markers', 'mesh', 'legends', 'annotations']), PropTypes.func])).isRequired,\n  enableGridX: PropTypes.bool.isRequired,\n  enableGridY: PropTypes.bool.isRequired,\n  axisTop: axisPropType,\n  axisRight: axisPropType,\n  axisBottom: axisPropType,\n  axisLeft: axisPropType,\n  annotations: PropTypes.arrayOf(annotationSpecPropType).isRequired,\n  nodeSize: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({\n    key: PropTypes.string.isRequired,\n    values: PropTypes.arrayOf(PropTypes.number).isRequired,\n    sizes: PropTypes.arrayOf(PropTypes.number).isRequired\n  }), PropTypes.func]).isRequired,\n  renderNode: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n  colors: ordinalColorsPropType.isRequired,\n  blendMode: blendModePropType.isRequired,\n  isInteractive: PropTypes.bool.isRequired,\n  debugMesh: PropTypes.bool.isRequired,\n  onMouseEnter: PropTypes.func,\n  onMouseMove: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  onClick: PropTypes.func,\n  tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n  markers: PropTypes.arrayOf(PropTypes.shape({\n    axis: PropTypes.oneOf(['x', 'y']).isRequired,\n    value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n    style: PropTypes.object\n  })),\n  legends: PropTypes.arrayOf(PropTypes.shape(LegendPropShape)).isRequired\n};\n\nvar ScatterPlotPropTypes = _objectSpread2(_objectSpread2({}, commonPropTypes), {}, {\n  role: PropTypes.string.isRequired,\n  useMesh: PropTypes.bool.isRequired\n}, motionPropTypes);\n\nvar ScatterPlotCanvasPropTypes = _objectSpread2(_objectSpread2({}, commonPropTypes), {}, {\n  pixelRatio: PropTypes.number.isRequired\n});\n\nvar commonDefaultProps = {\n  xScale: {\n    type: 'linear',\n    min: 0,\n    max: 'auto'\n  },\n  yScale: {\n    type: 'linear',\n    min: 0,\n    max: 'auto'\n  },\n  enableGridX: true,\n  enableGridY: true,\n  axisBottom: {},\n  axisLeft: {},\n  nodeSize: 9,\n  renderNode: Node$1,\n  colors: {\n    scheme: 'nivo'\n  },\n  blendMode: 'normal',\n  isInteractive: true,\n  debugMesh: false,\n  tooltip: Tooltip$1,\n  markers: [],\n  legends: [],\n  annotations: []\n};\n\nvar ScatterPlotDefaultProps = _objectSpread2(_objectSpread2({}, commonDefaultProps), {}, {\n  layers: ['grid', 'axes', 'nodes', 'markers', 'mesh', 'legends', 'annotations'],\n  role: 'img',\n  useMesh: true,\n  animate: true,\n  motionStiffness: 90,\n  motionDamping: 15\n});\n\nvar ScatterPlotCanvasDefaultProps = _objectSpread2(_objectSpread2({}, commonDefaultProps), {}, {\n  layers: ['grid', 'axes', 'nodes', 'mesh', 'legends', 'annotations'],\n  pixelRatio: global.window && global.window.devicePixelRatio ? global.window.devicePixelRatio : 1\n});\n\nvar NodePropType = PropTypes.shape({\n  id: PropTypes.string.isRequired,\n  x: PropTypes.number.isRequired,\n  y: PropTypes.number.isRequired,\n  size: PropTypes.number.isRequired,\n  data: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    serieId: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n    x: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)]).isRequired,\n    formattedX: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n    y: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)]).isRequired,\n    formattedY: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired\n  }).isRequired,\n  style: PropTypes.shape({\n    color: PropTypes.string.isRequired\n  }).isRequired\n});\n\nvar NodeWrapper = function NodeWrapper(_ref) {\n  var node = _ref.node,\n      NodeComponent = _ref.renderNode,\n      x = _ref.x,\n      y = _ref.y,\n      size = _ref.size,\n      color = _ref.color,\n      isInteractive = _ref.isInteractive,\n      onMouseEnter = _ref.onMouseEnter,\n      onMouseMove = _ref.onMouseMove,\n      onMouseLeave = _ref.onMouseLeave,\n      onClick = _ref.onClick,\n      tooltip = _ref.tooltip,\n      blendMode = _ref.blendMode;\n\n  var _useTooltip = useTooltip(),\n      showTooltipFromEvent = _useTooltip.showTooltipFromEvent,\n      hideTooltip = _useTooltip.hideTooltip;\n\n  var handleMouseEnter = useCallback(function (event) {\n    showTooltipFromEvent(React.createElement(tooltip, {\n      node: node\n    }), event);\n    onMouseEnter && onMouseEnter(node, event);\n  }, [node, tooltip, showTooltipFromEvent, onMouseEnter]);\n  var handleMouseMove = useCallback(function (event) {\n    showTooltipFromEvent(React.createElement(tooltip, {\n      node: node\n    }), event);\n    onMouseMove && onMouseMove(node, event);\n  }, [node, tooltip, showTooltipFromEvent, onMouseMove]);\n  var handleMouseLeave = useCallback(function (event) {\n    hideTooltip();\n    onMouseLeave && onMouseLeave(node, event);\n  }, [node, hideTooltip, onMouseLeave]);\n  var handleClick = useCallback(function (event) {\n    onClick && onClick(node, event);\n  }, [node, onClick]);\n  return React.createElement(NodeComponent, {\n    node: node,\n    x: x,\n    y: y,\n    size: size,\n    color: color,\n    blendMode: blendMode,\n    onMouseEnter: isInteractive ? handleMouseEnter : undefined,\n    onMouseMove: isInteractive ? handleMouseMove : undefined,\n    onMouseLeave: isInteractive ? handleMouseLeave : undefined,\n    onClick: isInteractive && onClick ? handleClick : undefined\n  });\n};\n\nvar NodeWrapper$1 = memo(NodeWrapper);\n\nvar AnimatedNodes = function AnimatedNodes(_ref) {\n  var nodes = _ref.nodes,\n      renderNode = _ref.renderNode,\n      isInteractive = _ref.isInteractive,\n      onMouseEnter = _ref.onMouseEnter,\n      onMouseMove = _ref.onMouseMove,\n      onMouseLeave = _ref.onMouseLeave,\n      onClick = _ref.onClick,\n      tooltip = _ref.tooltip,\n      blendMode = _ref.blendMode;\n\n  var _useMotionConfig = useMotionConfig(),\n      springConfig = _useMotionConfig.springConfig;\n\n  return React.createElement(TransitionMotion, {\n    styles: nodes.map(function (node) {\n      return {\n        key: node.id,\n        data: node,\n        style: {\n          x: spring(node.x, springConfig),\n          y: spring(node.y, springConfig),\n          size: spring(node.size, springConfig)\n        }\n      };\n    })\n  }, function (interpolatedStyles) {\n    return React.createElement(React.Fragment, null, interpolatedStyles.map(function (_ref2) {\n      var key = _ref2.key,\n          style = _ref2.style,\n          node = _ref2.data;\n      return React.createElement(NodeWrapper$1, {\n        key: key,\n        node: node,\n        renderNode: renderNode,\n        x: style.x,\n        y: style.y,\n        size: style.size,\n        color: node.style.color,\n        isInteractive: isInteractive,\n        onMouseEnter: onMouseEnter,\n        onMouseMove: onMouseMove,\n        onMouseLeave: onMouseLeave,\n        onClick: onClick,\n        tooltip: tooltip,\n        blendMode: blendMode\n      });\n    }));\n  });\n};\n\nvar AnimatedNodes$1 = memo(AnimatedNodes);\n\nvar ScatterPlotAnnotations = function ScatterPlotAnnotations(_ref) {\n  var nodes = _ref.nodes,\n      annotations = _ref.annotations,\n      innerWidth = _ref.innerWidth,\n      innerHeight = _ref.innerHeight;\n  var boundAnnotations = useScatterPlotAnnotations(nodes, annotations);\n  return boundAnnotations.map(function (annotation, i) {\n    return React.createElement(Annotation, Object.assign({\n      key: i\n    }, annotation, {\n      containerWidth: innerWidth,\n      containerHeight: innerHeight\n    }));\n  });\n};\n\nvar StaticNodes = function StaticNodes(_ref) {\n  var nodes = _ref.nodes,\n      renderNode = _ref.renderNode,\n      isInteractive = _ref.isInteractive,\n      onMouseEnter = _ref.onMouseEnter,\n      onMouseMove = _ref.onMouseMove,\n      onMouseLeave = _ref.onMouseLeave,\n      onClick = _ref.onClick,\n      tooltip = _ref.tooltip,\n      blendMode = _ref.blendMode;\n  return nodes.map(function (node) {\n    return React.createElement(NodeWrapper$1, {\n      key: node.id,\n      node: node,\n      renderNode: renderNode,\n      x: node.x,\n      y: node.y,\n      size: node.size,\n      color: node.style.color,\n      isInteractive: isInteractive,\n      onMouseEnter: onMouseEnter,\n      onMouseMove: onMouseMove,\n      onMouseLeave: onMouseLeave,\n      onClick: onClick,\n      tooltip: tooltip,\n      blendMode: blendMode\n    });\n  });\n};\n\nvar StaticNodes$1 = memo(StaticNodes);\n\nvar Mesh = function Mesh(_ref) {\n  var nodes = _ref.nodes,\n      width = _ref.width,\n      height = _ref.height,\n      onMouseEnter = _ref.onMouseEnter,\n      onMouseMove = _ref.onMouseMove,\n      onMouseLeave = _ref.onMouseLeave,\n      onClick = _ref.onClick,\n      tooltip = _ref.tooltip,\n      debug = _ref.debug;\n\n  var _useTooltip = useTooltip(),\n      showTooltipFromEvent = _useTooltip.showTooltipFromEvent,\n      hideTooltip = _useTooltip.hideTooltip;\n\n  var handleMouseEnter = useCallback(function (node, event) {\n    showTooltipFromEvent(React.createElement(tooltip, {\n      node: node\n    }), event);\n    onMouseEnter && onMouseEnter(node, event);\n  }, [showTooltipFromEvent, tooltip, onMouseEnter]);\n  var handleMouseMove = useCallback(function (node, event) {\n    showTooltipFromEvent(React.createElement(tooltip, {\n      node: node\n    }), event);\n    onMouseMove && onMouseMove(node, event);\n  }, [showTooltipFromEvent, tooltip, onMouseMove]);\n  var handleMouseLeave = useCallback(function (node, event) {\n    hideTooltip();\n    onMouseLeave && onMouseLeave(node, event);\n  }, [hideTooltip, onMouseLeave]);\n  var handleClick = useCallback(function (node, event) {\n    onClick && onClick(node, event);\n  }, [onClick]);\n  return React.createElement(Mesh$2, {\n    nodes: nodes,\n    width: width,\n    height: height,\n    onMouseEnter: handleMouseEnter,\n    onMouseMove: handleMouseMove,\n    onMouseLeave: handleMouseLeave,\n    onClick: handleClick,\n    debug: debug\n  });\n};\n\nvar Mesh$1 = memo(Mesh);\n\nvar ScatterPlot = function ScatterPlot(props) {\n  var data = props.data,\n      xScaleSpec = props.xScale,\n      xFormat = props.xFormat,\n      yScaleSpec = props.yScale,\n      yFormat = props.yFormat,\n      width = props.width,\n      height = props.height,\n      partialMargin = props.margin,\n      layers = props.layers,\n      colors = props.colors,\n      blendMode = props.blendMode,\n      nodeSize = props.nodeSize,\n      renderNode = props.renderNode,\n      enableGridX = props.enableGridX,\n      enableGridY = props.enableGridY,\n      gridXValues = props.gridXValues,\n      gridYValues = props.gridYValues,\n      axisTop = props.axisTop,\n      axisRight = props.axisRight,\n      axisBottom = props.axisBottom,\n      axisLeft = props.axisLeft,\n      annotations = props.annotations,\n      isInteractive = props.isInteractive,\n      useMesh = props.useMesh,\n      debugMesh = props.debugMesh,\n      onMouseEnter = props.onMouseEnter,\n      onMouseMove = props.onMouseMove,\n      onMouseLeave = props.onMouseLeave,\n      onClick = props.onClick,\n      tooltip = props.tooltip,\n      markers = props.markers,\n      legends = props.legends,\n      role = props.role;\n\n  var _useDimensions = useDimensions(width, height, partialMargin),\n      margin = _useDimensions.margin,\n      innerWidth = _useDimensions.innerWidth,\n      innerHeight = _useDimensions.innerHeight,\n      outerWidth = _useDimensions.outerWidth,\n      outerHeight = _useDimensions.outerHeight;\n\n  var theme = useTheme();\n\n  var _useMotionConfig = useMotionConfig(),\n      animate = _useMotionConfig.animate;\n\n  var _useScatterPlot = useScatterPlot({\n    data: data,\n    xScaleSpec: xScaleSpec,\n    xFormat: xFormat,\n    yScaleSpec: yScaleSpec,\n    yFormat: yFormat,\n    width: innerWidth,\n    height: innerHeight,\n    nodeSize: nodeSize,\n    colors: colors\n  }),\n      xScale = _useScatterPlot.xScale,\n      yScale = _useScatterPlot.yScale,\n      nodes = _useScatterPlot.nodes,\n      legendData = _useScatterPlot.legendData;\n\n  var customLayerProps = useMemo(function () {\n    return _objectSpread2(_objectSpread2({}, props), {}, {\n      xScale: xScale,\n      yScale: yScale,\n      nodes: nodes,\n      margin: margin,\n      innerWidth: innerWidth,\n      innerHeight: innerHeight,\n      outerWidth: outerWidth,\n      outerHeight: outerHeight\n    });\n  }, [xScale, yScale, nodes, margin, innerWidth, innerHeight, outerWidth, outerHeight]);\n  var Nodes = animate ? AnimatedNodes$1 : StaticNodes$1;\n  var layerById = {\n    grid: React.createElement(Grid, {\n      key: \"grid\",\n      width: innerWidth,\n      height: innerHeight,\n      xScale: enableGridX ? xScale : null,\n      yScale: enableGridY ? yScale : null,\n      xValues: gridXValues,\n      yValues: gridYValues\n    }),\n    axes: React.createElement(Axes, {\n      key: \"axes\",\n      xScale: xScale,\n      yScale: yScale,\n      width: innerWidth,\n      height: innerHeight,\n      top: axisTop,\n      right: axisRight,\n      bottom: axisBottom,\n      left: axisLeft\n    }),\n    nodes: React.createElement(Nodes, {\n      key: 'nodes',\n      nodes: nodes,\n      renderNode: renderNode,\n      isInteractive: isInteractive,\n      onMouseEnter: onMouseEnter,\n      onMouseMove: onMouseMove,\n      onMouseLeave: onMouseLeave,\n      onClick: onClick,\n      tooltip: tooltip,\n      blendMode: blendMode\n    }),\n    markers: React.createElement(CartesianMarkers, {\n      key: \"markers\",\n      markers: markers,\n      width: innerWidth,\n      height: innerHeight,\n      xScale: xScale,\n      yScale: yScale\n    }),\n    mesh: null,\n    annotations: React.createElement(ScatterPlotAnnotations, {\n      key: \"annotations\",\n      nodes: nodes,\n      annotations: annotations,\n      innerWidth: innerWidth,\n      innerHeight: innerHeight,\n      animate: animate\n    }),\n    legends: legends.map(function (legend, i) {\n      return React.createElement(BoxLegendSvg, Object.assign({\n        key: i\n      }, legend, {\n        containerWidth: innerWidth,\n        containerHeight: innerHeight,\n        data: legendData,\n        theme: theme\n      }));\n    })\n  };\n\n  if (isInteractive === true && useMesh === true) {\n    layerById.mesh = React.createElement(Mesh$1, {\n      key: \"mesh\",\n      nodes: nodes,\n      width: innerWidth,\n      height: innerHeight,\n      onMouseEnter: onMouseEnter,\n      onMouseMove: onMouseMove,\n      onMouseLeave: onMouseLeave,\n      onClick: onClick,\n      tooltip: tooltip,\n      debug: debugMesh\n    });\n  }\n\n  return React.createElement(SvgWrapper, {\n    width: outerWidth,\n    height: outerHeight,\n    margin: margin,\n    theme: theme,\n    role: role\n  }, layers.map(function (layer, i) {\n    if (layerById[layer] !== undefined) {\n      return layerById[layer];\n    }\n\n    if (typeof layer === 'function') {\n      return React.createElement(Fragment, {\n        key: i\n      }, React.createElement(layer, customLayerProps));\n    }\n\n    throw new Error(\"Unknown layer (\".concat(layer, \")\"));\n  }));\n};\n\nScatterPlot.defaultProps = ScatterPlotDefaultProps;\nvar ScatterPlot$1 = memo(withContainer(ScatterPlot));\n\nvar ResponsiveScatterPlot = function ResponsiveScatterPlot(props) {\n  return React.createElement(ResponsiveWrapper, null, function (_ref) {\n    var width = _ref.width,\n        height = _ref.height;\n    return React.createElement(ScatterPlot$1, Object.assign({\n      width: width,\n      height: height\n    }, props));\n  });\n};\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nvar ScatterPlotCanvas = function ScatterPlotCanvas(props) {\n  var data = props.data,\n      xScaleSpec = props.xScale,\n      xFormat = props.xFormat,\n      yScaleSpec = props.yScale,\n      yFormat = props.yFormat,\n      width = props.width,\n      height = props.height,\n      partialMargin = props.margin,\n      pixelRatio = props.pixelRatio,\n      layers = props.layers,\n      colors = props.colors,\n      nodeSize = props.nodeSize,\n      renderNode = props.renderNode,\n      enableGridX = props.enableGridX,\n      gridXValues = props.gridXValues,\n      enableGridY = props.enableGridY,\n      gridYValues = props.gridYValues,\n      axisTop = props.axisTop,\n      axisRight = props.axisRight,\n      axisBottom = props.axisBottom,\n      axisLeft = props.axisLeft,\n      annotations = props.annotations,\n      isInteractive = props.isInteractive,\n      debugMesh = props.debugMesh,\n      onMouseEnter = props.onMouseEnter,\n      onMouseMove = props.onMouseMove,\n      onMouseLeave = props.onMouseLeave,\n      onClick = props.onClick,\n      tooltip = props.tooltip,\n      legends = props.legends;\n  var canvasEl = useRef(null);\n  var theme = useTheme();\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentNode = _useState2[0],\n      setCurrentNode = _useState2[1];\n\n  var _useDimensions = useDimensions(width, height, partialMargin),\n      margin = _useDimensions.margin,\n      innerWidth = _useDimensions.innerWidth,\n      innerHeight = _useDimensions.innerHeight,\n      outerWidth = _useDimensions.outerWidth,\n      outerHeight = _useDimensions.outerHeight;\n\n  var _useScatterPlot = useScatterPlot({\n    data: data,\n    xScaleSpec: xScaleSpec,\n    xFormat: xFormat,\n    yScaleSpec: yScaleSpec,\n    yFormat: yFormat,\n    width: innerWidth,\n    height: innerHeight,\n    nodeSize: nodeSize,\n    colors: colors\n  }),\n      xScale = _useScatterPlot.xScale,\n      yScale = _useScatterPlot.yScale,\n      nodes = _useScatterPlot.nodes,\n      legendData = _useScatterPlot.legendData;\n\n  var boundAnnotations = useScatterPlotAnnotations(nodes, annotations);\n\n  var _useVoronoiMesh = useVoronoiMesh({\n    points: nodes,\n    width: innerWidth,\n    height: innerHeight,\n    debug: debugMesh\n  }),\n      delaunay = _useVoronoiMesh.delaunay,\n      voronoi = _useVoronoiMesh.voronoi;\n\n  var customLayerProps = useMemo(function () {\n    return _objectSpread2(_objectSpread2({}, props), {}, {\n      xScale: xScale,\n      yScale: yScale,\n      nodes: nodes,\n      margin: margin,\n      innerWidth: innerWidth,\n      innerHeight: innerHeight,\n      outerWidth: outerWidth,\n      outerHeight: outerHeight\n    });\n  }, [xScale, yScale, nodes, margin, innerWidth, innerHeight, outerWidth, outerHeight]);\n  useEffect(function () {\n    canvasEl.current.width = outerWidth * pixelRatio;\n    canvasEl.current.height = outerHeight * pixelRatio;\n    var ctx = canvasEl.current.getContext('2d');\n    ctx.scale(pixelRatio, pixelRatio);\n    ctx.fillStyle = theme.background;\n    ctx.fillRect(0, 0, outerWidth, outerHeight);\n    ctx.translate(margin.left, margin.top);\n    layers.forEach(function (layer) {\n      if (layer === 'grid') {\n        ctx.lineWidth = theme.grid.line.strokeWidth;\n        ctx.strokeStyle = theme.grid.line.stroke;\n        enableGridX && renderGridLinesToCanvas(ctx, {\n          width: innerWidth,\n          height: innerHeight,\n          scale: xScale,\n          axis: 'x',\n          values: gridXValues\n        });\n        enableGridY && renderGridLinesToCanvas(ctx, {\n          width: innerWidth,\n          height: innerHeight,\n          scale: yScale,\n          axis: 'y',\n          values: gridYValues\n        });\n      } else if (layer === 'annotations') {\n        renderAnnotationsToCanvas(ctx, {\n          annotations: boundAnnotations,\n          theme: theme\n        });\n      } else if (layer === 'axes') {\n        renderAxesToCanvas(ctx, {\n          xScale: xScale,\n          yScale: yScale,\n          width: innerWidth,\n          height: innerHeight,\n          top: axisTop,\n          right: axisRight,\n          bottom: axisBottom,\n          left: axisLeft,\n          theme: theme\n        });\n      } else if (layer === 'nodes') {\n        nodes.forEach(function (node) {\n          renderNode(ctx, node);\n        });\n      } else if (layer === 'mesh') {\n        if (debugMesh === true) {\n          renderVoronoiToCanvas(ctx, voronoi);\n\n          if (currentNode) {\n            renderVoronoiCellToCanvas(ctx, voronoi, currentNode.index);\n          }\n        }\n      } else if (layer === 'legends') {\n        legends.forEach(function (legend) {\n          renderLegendToCanvas(ctx, _objectSpread2(_objectSpread2({}, legend), {}, {\n            data: legendData,\n            containerWidth: innerWidth,\n            containerHeight: innerHeight,\n            theme: theme\n          }));\n        });\n      } else if (typeof layer === 'function') {\n        layer(ctx, customLayerProps);\n      } else {\n        throw new Error(\"Invalid layer: \".concat(layer));\n      }\n    });\n  }, [canvasEl, innerWidth, innerHeight, outerWidth, outerHeight, margin.top, margin.left, pixelRatio, renderNode, layers, customLayerProps, theme, xScale, yScale, nodes, enableGridX, enableGridY, axisTop, axisRight, axisBottom, axisLeft, legends, legendData, debugMesh, voronoi, currentNode]);\n\n  var _useTooltip = useTooltip(),\n      showTooltipFromEvent = _useTooltip.showTooltipFromEvent,\n      hideTooltip = _useTooltip.hideTooltip;\n\n  var getNodeFromMouseEvent = useCallback(function (event) {\n    var _getRelativeCursor = getRelativeCursor(canvasEl.current, event),\n        _getRelativeCursor2 = _slicedToArray(_getRelativeCursor, 2),\n        x = _getRelativeCursor2[0],\n        y = _getRelativeCursor2[1];\n\n    if (!isCursorInRect(margin.left, margin.top, innerWidth, innerHeight, x, y)) return null;\n    var nodeIndex = delaunay.find(x - margin.left, y - margin.top);\n    return nodes[nodeIndex];\n  }, [canvasEl, margin, innerWidth, innerHeight, delaunay]);\n  var handleMouseHover = useCallback(function (event) {\n    var node = getNodeFromMouseEvent(event);\n    setCurrentNode(node);\n\n    if (node) {\n      showTooltipFromEvent(React.createElement(tooltip, {\n        node: node\n      }), event);\n\n      if (currentNode && currentNode.id !== node.id) {\n        onMouseLeave && onMouseLeave(currentNode, event);\n        onMouseEnter && onMouseEnter(node, event);\n      }\n\n      if (!currentNode) {\n        onMouseEnter && onMouseEnter(node, event);\n      }\n\n      onMouseMove && onMouseMove(node, event);\n    } else {\n      hideTooltip();\n      currentNode && onMouseLeave && onMouseLeave(currentNode, event);\n    }\n  }, [getNodeFromMouseEvent, currentNode, setCurrentNode, showTooltipFromEvent, hideTooltip, tooltip, onMouseEnter, onMouseMove, onMouseLeave]);\n  var handleMouseLeave = useCallback(function (event) {\n    hideTooltip();\n    setCurrentNode(null);\n    currentNode && onMouseLeave && onMouseLeave(currentNode, event);\n  }, [hideTooltip, currentNode, setCurrentNode, onMouseLeave]);\n  var handleClick = useCallback(function (event) {\n    if (onClick) {\n      var node = getNodeFromMouseEvent(event);\n      node && onClick(node, event);\n    }\n  }, [getNodeFromMouseEvent, onClick]);\n  return React.createElement(\"canvas\", {\n    ref: canvasEl,\n    width: outerWidth * pixelRatio,\n    height: outerHeight * pixelRatio,\n    style: {\n      width: outerWidth,\n      height: outerHeight,\n      cursor: isInteractive ? 'auto' : 'normal'\n    },\n    onMouseEnter: isInteractive ? handleMouseHover : undefined,\n    onMouseMove: isInteractive ? handleMouseHover : undefined,\n    onMouseLeave: isInteractive ? handleMouseLeave : undefined,\n    onClick: isInteractive ? handleClick : undefined\n  });\n};\n\nScatterPlotCanvas.defaultProps = _objectSpread2(_objectSpread2({}, ScatterPlotCanvasDefaultProps), {}, {\n  renderNode: function renderNode(ctx, node) {\n    ctx.beginPath();\n    ctx.arc(node.x, node.y, node.size / 2, 0, 2 * Math.PI);\n    ctx.fillStyle = node.style.color;\n    ctx.fill();\n  }\n});\nvar ScatterPlotCanvas$1 = memo(withContainer(ScatterPlotCanvas));\n\nvar ResponsiveScatterPlotCanvas = function ResponsiveScatterPlotCanvas(props) {\n  return React.createElement(ResponsiveWrapper, null, function (_ref) {\n    var width = _ref.width,\n        height = _ref.height;\n    return React.createElement(ScatterPlotCanvas$1, Object.assign({\n      width: width,\n      height: height\n    }, props));\n  });\n};\n\nexport { NodePropType, ResponsiveScatterPlot, ResponsiveScatterPlotCanvas, ScatterPlot$1 as ScatterPlot, ScatterPlotCanvas$1 as ScatterPlotCanvas, ScatterPlotCanvasDefaultProps, ScatterPlotCanvasPropTypes, ScatterPlotDefaultProps, ScatterPlotPropTypes, useScatterPlot, useScatterPlotAnnotations };","map":{"version":3,"sources":["../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../src/compute.js","../src/hooks.js","../src/Node.js","../src/Tooltip.js","../src/props.js","../src/NodeWrapper.js","../src/AnimatedNodes.js","../src/ScatterPlotAnnotations.js","../src/StaticNodes.js","../src/Mesh.js","../src/ScatterPlot.js","../src/ResponsiveScatterPlot.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../src/ScatterPlotCanvas.js","../src/ResponsiveScatterPlotCanvas.js"],"names":["defineProperty","arrayLikeToArray","arrayWithoutHoles","iterableToArray","unsupportedIterableToArray","nonIterableSpread","getNodeSizeGenerator","isNumber","isPlainObject","isString","size","Array","sizeScale","scaleLinear","get","computePoints","series","formatX","formatY","index","agg","id","serie","x","d","y","data","serieId","formattedX","formattedY","useNodeSize","useMemo","useScatterPlot","xScaleSpec","xFormat","yScaleSpec","yFormat","width","height","nodeSize","colors","xScale","yScale","computeXYScalesForSeries","useValueFormatter","rawNodes","getNodeSize","getColor","useOrdinalColorScale","nodes","rawNode","style","color","legendData","label","useScatterPlotAnnotations","useAnnotations","items","annotations","getDimensions","node","offset","Node","blendMode","onMouseEnter","onMouseMove","onMouseLeave","onClick","mixBlendMode","memo","Tooltip","commonPropTypes","PropTypes","isRequired","scalePropType","layers","enableGridX","enableGridY","axisTop","axisRight","axisBottom","axisLeft","key","values","sizes","renderNode","ordinalColorsPropType","blendModePropType","isInteractive","debugMesh","tooltip","markers","axis","value","object","legends","ScatterPlotPropTypes","role","useMesh","ScatterPlotCanvasPropTypes","pixelRatio","commonDefaultProps","type","min","max","scheme","ScatterPlotDefaultProps","animate","motionStiffness","motionDamping","ScatterPlotCanvasDefaultProps","global","NodePropType","NodeWrapper","NodeComponent","showTooltipFromEvent","hideTooltip","useTooltip","handleMouseEnter","useCallback","handleMouseMove","handleMouseLeave","handleClick","undefined","AnimatedNodes","springConfig","useMotionConfig","spring","ScatterPlotAnnotations","innerWidth","innerHeight","boundAnnotations","i","StaticNodes","Mesh","debug","ScatterPlot","partialMargin","gridXValues","gridYValues","props","margin","outerWidth","outerHeight","useDimensions","theme","useTheme","customLayerProps","Nodes","layerById","grid","axes","mesh","React","withContainer","ResponsiveScatterPlot","arrayWithHoles","iterableToArrayLimit","nonIterableRest","ScatterPlotCanvas","canvasEl","useRef","currentNode","setCurrentNode","useState","delaunay","voronoi","useVoronoiMesh","points","useEffect","ctx","layer","renderGridLinesToCanvas","scale","renderAnnotationsToCanvas","renderAxesToCanvas","top","right","bottom","left","renderVoronoiToCanvas","renderVoronoiCellToCanvas","renderLegendToCanvas","containerWidth","containerHeight","getNodeFromMouseEvent","getRelativeCursor","isCursorInRect","nodeIndex","handleMouseHover","cursor","Math","ResponsiveScatterPlotCanvas"],"mappings":"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","sourcesContent":["export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport get from 'lodash/get'\nimport isString from 'lodash/isString'\nimport isNumber from 'lodash/isNumber'\nimport isPlainObject from 'lodash/isPlainObject'\nimport { scaleLinear } from 'd3-scale'\n\nexport const getNodeSizeGenerator = size => {\n    if (typeof size === 'function') return size\n    if (isNumber(size)) return () => size\n    if (isPlainObject(size)) {\n        if (!isString(size.key)) {\n            throw new Error(\n                'symbolSize is invalid, key should be a string pointing to the property to use to determine node size'\n            )\n        }\n        if (!Array.isArray(size.values) || size.values.length !== 2) {\n            throw new Error(\n                'symbolSize is invalid, values spec should be an array containing two values, min and max'\n            )\n        }\n        if (!Array.isArray(size.sizes) || size.sizes.length !== 2) {\n            throw new Error(\n                'symbolSize is invalid, sizes spec should be an array containing two values, min and max'\n            )\n        }\n\n        const sizeScale = scaleLinear()\n            .domain([size.values[0], size.values[1]])\n            .range([size.sizes[0], size.sizes[1]])\n\n        return d => sizeScale(get(d, size.key))\n    }\n\n    throw new Error('symbolSize is invalid, it should be either a function, a number or an object')\n}\n\nexport const computePoints = ({ series, formatX, formatY }) => {\n    return series.reduce(\n        (agg, serie) => [\n            ...agg,\n            ...serie.data.map((d, i) => ({\n                index: agg.length + i,\n                id: `${serie.id}.${i}`,\n                x: d.position.x,\n                y: d.position.y,\n                data: {\n                    ...d.data,\n                    id: `${serie.id}.${i}`,\n                    serieId: serie.id,\n                    formattedX: formatX(d.data.x),\n                    formattedY: formatY(d.data.y),\n                },\n            })),\n        ],\n        []\n    )\n}\n\nexport const computeLegendData = ({ series }) => {\n    return series.map(serie => ({\n        id: serie.id,\n        label: serie.id,\n        //color: getColor({ serie }),\n    }))\n}\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { useMemo } from 'react'\nimport { useValueFormatter } from '@nivo/core'\nimport { useOrdinalColorScale } from '@nivo/colors'\nimport { computeXYScalesForSeries } from '@nivo/scales'\nimport { useAnnotations } from '@nivo/annotations'\nimport { computePoints, getNodeSizeGenerator } from './compute'\n\nconst useNodeSize = size => useMemo(() => getNodeSizeGenerator(size), [size])\n\nexport const useScatterPlot = ({\n    data,\n    xScaleSpec,\n    xFormat,\n    yScaleSpec,\n    yFormat,\n    width,\n    height,\n    nodeSize,\n    colors,\n}) => {\n    const { series, xScale, yScale } = useMemo(\n        () => computeXYScalesForSeries(data, xScaleSpec, yScaleSpec, width, height),\n        [data, xScaleSpec, yScaleSpec, width, height]\n    )\n\n    const formatX = useValueFormatter(xFormat)\n    const formatY = useValueFormatter(yFormat)\n    const rawNodes = useMemo(() => computePoints({ series, formatX, formatY }), [\n        series,\n        formatX,\n        formatY,\n    ])\n\n    const getNodeSize = useNodeSize(nodeSize)\n\n    const getColor = useOrdinalColorScale(colors, 'serieId')\n\n    const nodes = useMemo(\n        () =>\n            rawNodes.map(rawNode => {\n                return {\n                    ...rawNode,\n                    size: getNodeSize(rawNode.data),\n                    style: {\n                        color: getColor(rawNode.data),\n                    },\n                }\n            }),\n        [rawNodes, getNodeSize, getColor]\n    )\n\n    const legendData = useMemo(\n        () =>\n            series.map(serie => ({\n                id: serie.id,\n                label: serie.id,\n                color: getColor({ serieId: serie.id }),\n            })),\n        [series, getColor]\n    )\n\n    return {\n        xScale,\n        yScale,\n        nodes,\n        legendData,\n    }\n}\n\nexport const useScatterPlotAnnotations = (items, annotations) =>\n    useAnnotations({\n        items,\n        annotations,\n        getDimensions: (node, offset) => {\n            const size = node.size + offset * 2\n            return { size, width: size, height: size }\n        },\n    })\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { blendModePropType } from '@nivo/core'\n\nconst Node = ({\n    x,\n    y,\n    size,\n    color,\n    blendMode,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n}) => (\n    <circle\n        cx={x}\n        cy={y}\n        r={size / 2}\n        fill={color}\n        style={{ mixBlendMode: blendMode }}\n        onMouseEnter={onMouseEnter}\n        onMouseMove={onMouseMove}\n        onMouseLeave={onMouseLeave}\n        onClick={onClick}\n    />\n)\n\nNode.propTypes = {\n    node: PropTypes.object.isRequired,\n\n    x: PropTypes.number.isRequired,\n    y: PropTypes.number.isRequired,\n    size: PropTypes.number.isRequired,\n    color: PropTypes.string.isRequired,\n    blendMode: blendModePropType.isRequired,\n\n    onMouseEnter: PropTypes.func,\n    onMouseMove: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    onClick: PropTypes.func,\n}\n\nexport default memo(Node)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { BasicTooltip } from '@nivo/tooltip'\n\nconst Tooltip = ({ node }) => {\n    return (\n        <BasicTooltip\n            id={node.data.serieId}\n            value={`x: ${node.data.formattedX}, y: ${node.data.formattedY}`}\n            enableChip={true}\n            color={node.style.color}\n        />\n    )\n}\n\nTooltip.propTypes = {\n    node: PropTypes.object.isRequired,\n}\n\nexport default memo(Tooltip)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport PropTypes from 'prop-types'\nimport { motionPropTypes, blendModePropType } from '@nivo/core'\nimport { ordinalColorsPropType } from '@nivo/colors'\nimport { axisPropType } from '@nivo/axes'\nimport { LegendPropShape } from '@nivo/legends'\nimport { scalePropType } from '@nivo/scales'\nimport { annotationSpecPropType } from '@nivo/annotations'\nimport Node from './Node'\nimport Tooltip from './Tooltip'\n\nconst commonPropTypes = {\n    data: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n            data: PropTypes.arrayOf(\n                PropTypes.shape({\n                    x: PropTypes.oneOfType([\n                        PropTypes.number,\n                        PropTypes.string,\n                        PropTypes.instanceOf(Date),\n                    ]).isRequired,\n                    y: PropTypes.oneOfType([\n                        PropTypes.number,\n                        PropTypes.string,\n                        PropTypes.instanceOf(Date),\n                    ]).isRequired,\n                })\n            ).isRequired,\n        })\n    ).isRequired,\n    xScale: scalePropType.isRequired,\n    xFormat: PropTypes.any,\n    yScale: scalePropType.isRequired,\n    yFormat: PropTypes.any,\n\n    layers: PropTypes.arrayOf(\n        PropTypes.oneOfType([\n            PropTypes.oneOf(['grid', 'axes', 'nodes', 'markers', 'mesh', 'legends', 'annotations']),\n            PropTypes.func,\n        ])\n    ).isRequired,\n\n    enableGridX: PropTypes.bool.isRequired,\n    enableGridY: PropTypes.bool.isRequired,\n    axisTop: axisPropType,\n    axisRight: axisPropType,\n    axisBottom: axisPropType,\n    axisLeft: axisPropType,\n\n    annotations: PropTypes.arrayOf(annotationSpecPropType).isRequired,\n\n    nodeSize: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.shape({\n            key: PropTypes.string.isRequired,\n            values: PropTypes.arrayOf(PropTypes.number).isRequired,\n            sizes: PropTypes.arrayOf(PropTypes.number).isRequired,\n        }),\n        PropTypes.func,\n    ]).isRequired,\n    renderNode: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n\n    colors: ordinalColorsPropType.isRequired,\n    blendMode: blendModePropType.isRequired,\n\n    isInteractive: PropTypes.bool.isRequired,\n    debugMesh: PropTypes.bool.isRequired,\n    onMouseEnter: PropTypes.func,\n    onMouseMove: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    onClick: PropTypes.func,\n\n    tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n\n    markers: PropTypes.arrayOf(\n        PropTypes.shape({\n            axis: PropTypes.oneOf(['x', 'y']).isRequired,\n            value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n            style: PropTypes.object,\n        })\n    ),\n\n    legends: PropTypes.arrayOf(PropTypes.shape(LegendPropShape)).isRequired,\n}\n\nexport const ScatterPlotPropTypes = {\n    ...commonPropTypes,\n    role: PropTypes.string.isRequired,\n    useMesh: PropTypes.bool.isRequired,\n    ...motionPropTypes,\n}\n\nexport const ScatterPlotCanvasPropTypes = {\n    ...commonPropTypes,\n    pixelRatio: PropTypes.number.isRequired,\n}\n\nconst commonDefaultProps = {\n    xScale: {\n        type: 'linear',\n        min: 0,\n        max: 'auto',\n    },\n    yScale: {\n        type: 'linear',\n        min: 0,\n        max: 'auto',\n    },\n\n    enableGridX: true,\n    enableGridY: true,\n    axisBottom: {},\n    axisLeft: {},\n\n    nodeSize: 9,\n    renderNode: Node,\n\n    colors: { scheme: 'nivo' },\n    blendMode: 'normal',\n\n    isInteractive: true,\n    debugMesh: false,\n\n    tooltip: Tooltip,\n\n    markers: [],\n\n    legends: [],\n\n    annotations: [],\n}\n\nexport const ScatterPlotDefaultProps = {\n    ...commonDefaultProps,\n    layers: ['grid', 'axes', 'nodes', 'markers', 'mesh', 'legends', 'annotations'],\n    role: 'img',\n    useMesh: true,\n    animate: true,\n    motionStiffness: 90,\n    motionDamping: 15,\n}\n\nexport const ScatterPlotCanvasDefaultProps = {\n    ...commonDefaultProps,\n    layers: ['grid', 'axes', 'nodes', 'mesh', 'legends', 'annotations'],\n    pixelRatio:\n        global.window && global.window.devicePixelRatio ? global.window.devicePixelRatio : 1,\n}\n\nexport const NodePropType = PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    x: PropTypes.number.isRequired,\n    y: PropTypes.number.isRequired,\n    size: PropTypes.number.isRequired,\n    data: PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        serieId: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n        x: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)])\n            .isRequired,\n        formattedX: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n        y: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)])\n            .isRequired,\n        formattedY: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n    }).isRequired,\n    style: PropTypes.shape({\n        color: PropTypes.string.isRequired,\n    }).isRequired,\n})\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { memo, useCallback } from 'react'\nimport PropTypes from 'prop-types'\nimport { blendModePropType } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport { NodePropType } from './props'\n\nconst NodeWrapper = ({\n    node,\n    renderNode: NodeComponent,\n    x,\n    y,\n    size,\n    color,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n    blendMode,\n}) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        event => {\n            showTooltipFromEvent(React.createElement(tooltip, { node }), event)\n            onMouseEnter && onMouseEnter(node, event)\n        },\n        [node, tooltip, showTooltipFromEvent, onMouseEnter]\n    )\n\n    const handleMouseMove = useCallback(\n        event => {\n            showTooltipFromEvent(React.createElement(tooltip, { node }), event)\n            onMouseMove && onMouseMove(node, event)\n        },\n        [node, tooltip, showTooltipFromEvent, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(\n        event => {\n            hideTooltip()\n            onMouseLeave && onMouseLeave(node, event)\n        },\n        [node, hideTooltip, onMouseLeave]\n    )\n\n    const handleClick = useCallback(\n        event => {\n            onClick && onClick(node, event)\n        },\n        [node, onClick]\n    )\n\n    return React.createElement(NodeComponent, {\n        node,\n        x,\n        y,\n        size,\n        color,\n        blendMode,\n        onMouseEnter: isInteractive ? handleMouseEnter : undefined,\n        onMouseMove: isInteractive ? handleMouseMove : undefined,\n        onMouseLeave: isInteractive ? handleMouseLeave : undefined,\n        onClick: isInteractive && onClick ? handleClick : undefined,\n    })\n}\n\nNodeWrapper.propTypes = {\n    node: NodePropType.isRequired,\n    renderNode: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n\n    x: PropTypes.number.isRequired,\n    y: PropTypes.number.isRequired,\n    size: PropTypes.number.isRequired,\n    color: PropTypes.string.isRequired,\n\n    isInteractive: PropTypes.bool.isRequired,\n    onMouseEnter: PropTypes.func,\n    onMouseMove: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    onClick: PropTypes.func,\n\n    tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n\n    blendMode: blendModePropType.isRequired,\n}\n\nexport default memo(NodeWrapper)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { TransitionMotion, spring } from 'react-motion'\nimport { useMotionConfig, blendModePropType } from '@nivo/core'\nimport { NodePropType } from './props'\nimport NodeWrapper from './NodeWrapper'\n\nconst AnimatedNodes = ({\n    nodes,\n    renderNode,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n    blendMode,\n}) => {\n    const { springConfig } = useMotionConfig()\n\n    return (\n        <TransitionMotion\n            styles={nodes.map(node => ({\n                key: node.id,\n                data: node,\n                style: {\n                    x: spring(node.x, springConfig),\n                    y: spring(node.y, springConfig),\n                    size: spring(node.size, springConfig),\n                },\n            }))}\n        >\n            {interpolatedStyles => (\n                <>\n                    {interpolatedStyles.map(({ key, style, data: node }) => (\n                        <NodeWrapper\n                            key={key}\n                            node={node}\n                            renderNode={renderNode}\n                            x={style.x}\n                            y={style.y}\n                            size={style.size}\n                            color={node.style.color}\n                            isInteractive={isInteractive}\n                            onMouseEnter={onMouseEnter}\n                            onMouseMove={onMouseMove}\n                            onMouseLeave={onMouseLeave}\n                            onClick={onClick}\n                            tooltip={tooltip}\n                            blendMode={blendMode}\n                        />\n                    ))}\n                </>\n            )}\n        </TransitionMotion>\n    )\n}\n\nAnimatedNodes.propTypes = {\n    nodes: PropTypes.arrayOf(NodePropType).isRequired,\n    renderNode: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n\n    isInteractive: PropTypes.bool.isRequired,\n    onMouseEnter: PropTypes.func,\n    onMouseMove: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    onClick: PropTypes.func,\n\n    tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n\n    blendMode: blendModePropType.isRequired,\n}\n\nexport default memo(AnimatedNodes)\n","import React from 'react'\nimport { Annotation } from '@nivo/annotations'\nimport { useScatterPlotAnnotations } from './hooks'\n\nconst ScatterPlotAnnotations = ({ nodes, annotations, innerWidth, innerHeight }) => {\n    const boundAnnotations = useScatterPlotAnnotations(nodes, annotations)\n\n    return boundAnnotations.map((annotation, i) => (\n        <Annotation\n            key={i}\n            {...annotation}\n            containerWidth={innerWidth}\n            containerHeight={innerHeight}\n        />\n    ))\n}\n\nScatterPlotAnnotations.propTypes = {}\n\nexport default ScatterPlotAnnotations\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { blendModePropType } from '@nivo/core'\nimport { NodePropType } from './props'\nimport NodeWrapper from './NodeWrapper'\n\nconst StaticNodes = ({\n    nodes,\n    renderNode,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n    blendMode,\n}) => {\n    return nodes.map(node => (\n        <NodeWrapper\n            key={node.id}\n            node={node}\n            renderNode={renderNode}\n            x={node.x}\n            y={node.y}\n            size={node.size}\n            color={node.style.color}\n            isInteractive={isInteractive}\n            onMouseEnter={onMouseEnter}\n            onMouseMove={onMouseMove}\n            onMouseLeave={onMouseLeave}\n            onClick={onClick}\n            tooltip={tooltip}\n            blendMode={blendMode}\n        />\n    ))\n}\n\nStaticNodes.propTypes = {\n    nodes: PropTypes.arrayOf(NodePropType).isRequired,\n    renderNode: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n\n    isInteractive: PropTypes.bool.isRequired,\n    onMouseEnter: PropTypes.func,\n    onMouseMove: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    onClick: PropTypes.func,\n\n    tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n\n    blendMode: blendModePropType.isRequired,\n}\n\nexport default memo(StaticNodes)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { memo, useCallback } from 'react'\nimport PropTypes from 'prop-types'\nimport { useTooltip } from '@nivo/tooltip'\nimport { Mesh as BaseMesh } from '@nivo/voronoi'\nimport { NodePropType } from './props'\n\nconst Mesh = ({\n    nodes,\n    width,\n    height,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n    debug,\n}) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        (node, event) => {\n            showTooltipFromEvent(React.createElement(tooltip, { node }), event)\n            onMouseEnter && onMouseEnter(node, event)\n        },\n        [showTooltipFromEvent, tooltip, onMouseEnter]\n    )\n\n    const handleMouseMove = useCallback(\n        (node, event) => {\n            showTooltipFromEvent(React.createElement(tooltip, { node }), event)\n            onMouseMove && onMouseMove(node, event)\n        },\n        [showTooltipFromEvent, tooltip, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(\n        (node, event) => {\n            hideTooltip()\n            onMouseLeave && onMouseLeave(node, event)\n        },\n        [hideTooltip, onMouseLeave]\n    )\n\n    const handleClick = useCallback(\n        (node, event) => {\n            onClick && onClick(node, event)\n        },\n        [onClick]\n    )\n\n    return (\n        <BaseMesh\n            nodes={nodes}\n            width={width}\n            height={height}\n            onMouseEnter={handleMouseEnter}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n            onClick={handleClick}\n            debug={debug}\n        />\n    )\n}\n\nMesh.propTypes = {\n    nodes: PropTypes.arrayOf(NodePropType).isRequired,\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n    onMouseEnter: PropTypes.func,\n    onMouseMove: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    onClick: PropTypes.func,\n    tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n    debug: PropTypes.bool.isRequired,\n}\n\nexport default memo(Mesh)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { memo, Fragment, useMemo } from 'react'\nimport {\n    SvgWrapper,\n    withContainer,\n    useDimensions,\n    useTheme,\n    useMotionConfig,\n    CartesianMarkers,\n} from '@nivo/core'\nimport { Axes, Grid } from '@nivo/axes'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { useScatterPlot } from './hooks'\nimport { ScatterPlotPropTypes, ScatterPlotDefaultProps } from './props'\nimport AnimatedNodes from './AnimatedNodes'\nimport ScatterPlotAnnotations from './ScatterPlotAnnotations'\nimport StaticNodes from './StaticNodes'\nimport Mesh from './Mesh'\n\nconst ScatterPlot = props => {\n    const {\n        data,\n        xScale: xScaleSpec,\n        xFormat,\n        yScale: yScaleSpec,\n        yFormat,\n\n        width,\n        height,\n        margin: partialMargin,\n\n        layers,\n\n        colors,\n        blendMode,\n\n        nodeSize,\n        renderNode,\n\n        enableGridX,\n        enableGridY,\n        gridXValues,\n        gridYValues,\n        axisTop,\n        axisRight,\n        axisBottom,\n        axisLeft,\n\n        annotations,\n\n        isInteractive,\n        useMesh,\n        debugMesh,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        tooltip,\n\n        markers,\n\n        legends,\n        role,\n    } = props\n\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const theme = useTheme()\n    const { animate } = useMotionConfig()\n\n    const { xScale, yScale, nodes, legendData } = useScatterPlot({\n        data,\n        xScaleSpec,\n        xFormat,\n        yScaleSpec,\n        yFormat,\n        width: innerWidth,\n        height: innerHeight,\n        nodeSize,\n        colors,\n    })\n\n    const customLayerProps = useMemo(\n        () => ({\n            ...props,\n            xScale,\n            yScale,\n            nodes,\n            margin,\n            innerWidth,\n            innerHeight,\n            outerWidth,\n            outerHeight,\n        }),\n        [xScale, yScale, nodes, margin, innerWidth, innerHeight, outerWidth, outerHeight]\n    )\n\n    const Nodes = animate ? AnimatedNodes : StaticNodes\n\n    const layerById = {\n        grid: (\n            <Grid\n                key=\"grid\"\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? xScale : null}\n                yScale={enableGridY ? yScale : null}\n                xValues={gridXValues}\n                yValues={gridYValues}\n            />\n        ),\n        axes: (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={yScale}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        ),\n        nodes: React.createElement(Nodes, {\n            key: 'nodes',\n            nodes,\n            renderNode,\n            isInteractive,\n            onMouseEnter,\n            onMouseMove,\n            onMouseLeave,\n            onClick,\n            tooltip,\n            blendMode,\n        }),\n        markers: (\n            <CartesianMarkers\n                key=\"markers\"\n                markers={markers}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={xScale}\n                yScale={yScale}\n            />\n        ),\n        mesh: null,\n        annotations: (\n            <ScatterPlotAnnotations\n                key=\"annotations\"\n                nodes={nodes}\n                annotations={annotations}\n                innerWidth={innerWidth}\n                innerHeight={innerHeight}\n                animate={animate}\n            />\n        ),\n        legends: legends.map((legend, i) => (\n            <BoxLegendSvg\n                key={i}\n                {...legend}\n                containerWidth={innerWidth}\n                containerHeight={innerHeight}\n                data={legendData}\n                theme={theme}\n            />\n        )),\n    }\n\n    if (isInteractive === true && useMesh === true) {\n        layerById.mesh = (\n            <Mesh\n                key=\"mesh\"\n                nodes={nodes}\n                width={innerWidth}\n                height={innerHeight}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n                tooltip={tooltip}\n                debug={debugMesh}\n            />\n        )\n    }\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            theme={theme}\n            role={role}\n        >\n            {layers.map((layer, i) => {\n                if (layerById[layer] !== undefined) {\n                    return layerById[layer]\n                }\n\n                if (typeof layer === 'function') {\n                    return (\n                        <Fragment key={i}>{React.createElement(layer, customLayerProps)}</Fragment>\n                    )\n                }\n\n                throw new Error(`Unknown layer (${layer})`)\n            })}\n        </SvgWrapper>\n    )\n}\n\nScatterPlot.propTypes = ScatterPlotPropTypes\nScatterPlot.defaultProps = ScatterPlotDefaultProps\n\nexport default memo(withContainer(ScatterPlot))\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React from 'react'\nimport { ResponsiveWrapper } from '@nivo/core'\nimport ScatterPlot from './ScatterPlot'\n\nconst ResponsiveScatterPlot = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <ScatterPlot width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveScatterPlot\n","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { memo, useRef, useState, useEffect, useCallback, useMemo } from 'react'\nimport {\n    withContainer,\n    useDimensions,\n    useTheme,\n    getRelativeCursor,\n    isCursorInRect,\n} from '@nivo/core'\nimport { renderAnnotationsToCanvas } from '@nivo/annotations'\nimport { renderAxesToCanvas, renderGridLinesToCanvas } from '@nivo/axes'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useVoronoiMesh, renderVoronoiToCanvas, renderVoronoiCellToCanvas } from '@nivo/voronoi'\nimport { ScatterPlotCanvasPropTypes, ScatterPlotCanvasDefaultProps } from './props'\nimport { useScatterPlot, useScatterPlotAnnotations } from './hooks'\n\nconst ScatterPlotCanvas = props => {\n    const {\n        data,\n        xScale: xScaleSpec,\n        xFormat,\n        yScale: yScaleSpec,\n        yFormat,\n\n        width,\n        height,\n        margin: partialMargin,\n        pixelRatio,\n\n        layers,\n\n        colors,\n\n        nodeSize,\n        renderNode,\n\n        enableGridX,\n        gridXValues,\n        enableGridY,\n        gridYValues,\n        axisTop,\n        axisRight,\n        axisBottom,\n        axisLeft,\n\n        annotations,\n\n        isInteractive,\n        debugMesh,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        tooltip,\n\n        legends,\n    } = props\n\n    const canvasEl = useRef(null)\n    const theme = useTheme()\n    const [currentNode, setCurrentNode] = useState(null)\n\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { xScale, yScale, nodes, legendData } = useScatterPlot({\n        data,\n        xScaleSpec,\n        xFormat,\n        yScaleSpec,\n        yFormat,\n        width: innerWidth,\n        height: innerHeight,\n        nodeSize,\n        colors,\n    })\n\n    const boundAnnotations = useScatterPlotAnnotations(nodes, annotations)\n\n    const { delaunay, voronoi } = useVoronoiMesh({\n        points: nodes,\n        width: innerWidth,\n        height: innerHeight,\n        debug: debugMesh,\n    })\n\n    const customLayerProps = useMemo(\n        () => ({\n            ...props,\n            xScale,\n            yScale,\n            nodes,\n            margin,\n            innerWidth,\n            innerHeight,\n            outerWidth,\n            outerHeight,\n        }),\n        [xScale, yScale, nodes, margin, innerWidth, innerHeight, outerWidth, outerHeight]\n    )\n\n    useEffect(() => {\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (layer === 'grid') {\n                ctx.lineWidth = theme.grid.line.strokeWidth\n                ctx.strokeStyle = theme.grid.line.stroke\n\n                enableGridX &&\n                    renderGridLinesToCanvas(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: xScale,\n                        axis: 'x',\n                        values: gridXValues,\n                    })\n\n                enableGridY &&\n                    renderGridLinesToCanvas(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: yScale,\n                        axis: 'y',\n                        values: gridYValues,\n                    })\n            } else if (layer === 'annotations') {\n                renderAnnotationsToCanvas(ctx, { annotations: boundAnnotations, theme })\n            } else if (layer === 'axes') {\n                renderAxesToCanvas(ctx, {\n                    xScale,\n                    yScale,\n                    width: innerWidth,\n                    height: innerHeight,\n                    top: axisTop,\n                    right: axisRight,\n                    bottom: axisBottom,\n                    left: axisLeft,\n                    theme,\n                })\n            } else if (layer === 'nodes') {\n                nodes.forEach(node => {\n                    renderNode(ctx, node)\n                })\n            } else if (layer === 'mesh') {\n                if (debugMesh === true) {\n                    renderVoronoiToCanvas(ctx, voronoi)\n                    if (currentNode) {\n                        renderVoronoiCellToCanvas(ctx, voronoi, currentNode.index)\n                    }\n                }\n            } else if (layer === 'legends') {\n                legends.forEach(legend => {\n                    renderLegendToCanvas(ctx, {\n                        ...legend,\n                        data: legendData,\n                        containerWidth: innerWidth,\n                        containerHeight: innerHeight,\n                        theme,\n                    })\n                })\n            } else if (typeof layer === 'function') {\n                layer(ctx, customLayerProps)\n            } else {\n                throw new Error(`Invalid layer: ${layer}`)\n            }\n        })\n    }, [\n        canvasEl,\n        innerWidth,\n        innerHeight,\n        outerWidth,\n        outerHeight,\n        margin.top,\n        margin.left,\n        pixelRatio,\n        renderNode,\n        layers,\n        customLayerProps,\n        theme,\n        xScale,\n        yScale,\n        nodes,\n        enableGridX,\n        enableGridY,\n        axisTop,\n        axisRight,\n        axisBottom,\n        axisLeft,\n        legends,\n        legendData,\n        debugMesh,\n        voronoi,\n        currentNode,\n    ])\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const getNodeFromMouseEvent = useCallback(\n        event => {\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            if (!isCursorInRect(margin.left, margin.top, innerWidth, innerHeight, x, y)) return null\n\n            const nodeIndex = delaunay.find(x - margin.left, y - margin.top)\n            return nodes[nodeIndex]\n        },\n        [canvasEl, margin, innerWidth, innerHeight, delaunay]\n    )\n\n    const handleMouseHover = useCallback(\n        event => {\n            const node = getNodeFromMouseEvent(event)\n            setCurrentNode(node)\n\n            if (node) {\n                showTooltipFromEvent(React.createElement(tooltip, { node }), event)\n                if (currentNode && currentNode.id !== node.id) {\n                    onMouseLeave && onMouseLeave(currentNode, event)\n                    onMouseEnter && onMouseEnter(node, event)\n                }\n                if (!currentNode) {\n                    onMouseEnter && onMouseEnter(node, event)\n                }\n                onMouseMove && onMouseMove(node, event)\n            } else {\n                hideTooltip()\n                currentNode && onMouseLeave && onMouseLeave(currentNode, event)\n            }\n        },\n        [\n            getNodeFromMouseEvent,\n            currentNode,\n            setCurrentNode,\n            showTooltipFromEvent,\n            hideTooltip,\n            tooltip,\n            onMouseEnter,\n            onMouseMove,\n            onMouseLeave,\n        ]\n    )\n\n    const handleMouseLeave = useCallback(\n        event => {\n            hideTooltip()\n            setCurrentNode(null)\n            currentNode && onMouseLeave && onMouseLeave(currentNode, event)\n        },\n        [hideTooltip, currentNode, setCurrentNode, onMouseLeave]\n    )\n\n    const handleClick = useCallback(\n        event => {\n            if (onClick) {\n                const node = getNodeFromMouseEvent(event)\n                node && onClick(node, event)\n            }\n        },\n        [getNodeFromMouseEvent, onClick]\n    )\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nScatterPlotCanvas.propTypes = ScatterPlotCanvasPropTypes\nScatterPlotCanvas.defaultProps = {\n    ...ScatterPlotCanvasDefaultProps,\n    renderNode: (ctx, node) => {\n        ctx.beginPath()\n        ctx.arc(node.x, node.y, node.size / 2, 0, 2 * Math.PI)\n        ctx.fillStyle = node.style.color\n        ctx.fill()\n    },\n}\n\nexport default memo(withContainer(ScatterPlotCanvas))\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React from 'react'\nimport { ResponsiveWrapper } from '@nivo/core'\nimport ScatterPlotCanvas from './ScatterPlotCanvas'\n\nconst ResponsiveScatterPlotCanvas = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <ScatterPlotCanvas width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveScatterPlotCanvas\n"]},"metadata":{},"sourceType":"module"}